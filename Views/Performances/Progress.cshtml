@model Pinpoint_Quiz.Models.PerformanceChartViewModel
@using System.Text.Json;

@{
    ViewData["Title"] = "Progress";
}

<div class="progress-content" style="width: 70%; max-width: 1000px; margin: auto; background: #fff; padding: 20px; border-radius: 10px;">
    <h2>Your learning journey</h2>
    <br />
    <!-- Actual Proficiency Chart -->
    <canvas id="actual-chart" style="width: 100%; height: 400px; margin-top:50px;"></canvas>
    <br />
    <!-- Estimated Proficiency Chart -->
    <canvas id="estimated-chart" style="width: 100%; height: 400px;"></canvas>
    <br />
    <!-- Time to Complete Chart -->
    <canvas id="time-chart" style="width: 100%; height: 400px; margin-top:50px;"></canvas>
    <br />
    <div style="margin-top:50px;"></div>
    <br />
    <h3>Past Quiz Attempts</h3>
    <div style="margin-top:20px;">
        @foreach (var quiz in Model.QuizHistory.OrderByDescending(q => q.QuizDate))
        {
            <div style="margin-bottom:20px; padding:10px; border:1px solid #ccc; border-radius:8px;">
                <h4>Quiz from @quiz.QuizDate.ToLocalTime().ToString("MMMM dd, yyyy - hh:mm tt")</h4>
                <p><strong>Math and Logic:</strong> @quiz.MathCorrect / @quiz.MathTotal</p>
                <p><strong>English:</strong> @quiz.EbrwCorrect / @quiz.EbrwTotal</p>
                <p>
                    <strong>Estimated Proficiency:</strong> @quiz.OverallProficiency <br />
                    <strong>Actual Proficiency:</strong>
                    (Math and Logic: @quiz.ActualMathProficiency, English: @quiz.ActualEbrwProficiency, Overall: @quiz.ActualOverallProficiency)
                </p>
                <!--
                    <p>
                    <strong>Time Started:</strong> @quiz.TimeStarted.ToLocalTime().ToString("hh:mm tt")<br />
                    <strong>Time Ended:</strong> @quiz.TimeEnded.ToLocalTime().ToString("hh:mm tt")<br />
                    <strong>Time Elapsed:</strong> @quiz.TimeElapsed.ToString("F2") seconds
                </p>
                -->
                <a class="btn btn-link" href="/Quizzes/Results?quizId=@quiz.QuizId">View Details</a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Estimated proficiency chart
            const ctxEstimated = document.getElementById('estimated-chart').getContext('2d');
            const estimatedChart = new Chart(ctxEstimated, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Math and Logic Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.MathLevels)),
                            borderColor: 'blue',
                            fill: false
                        },
                        {
                            label: 'English Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.EbrwLevels)),
                            borderColor: 'red',
                            fill: false
                        },
                        {
                            label: 'Overall Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.OverallLevels)),
                            borderColor: 'grey',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Estimated Proficiency Level' }, min: 1, max: 15, ticks: { stepSize: 1 } }
                    }
                }
            });

            // Actual proficiency chart
            const ctxActual = document.getElementById('actual-chart').getContext('2d');
            const actualChart = new Chart(ctxActual, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Math and Logic Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualMathLevels)),
                            borderColor: 'green',
                            fill: false
                        },
                        {
                            label: 'English Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualEbrwLevels)),
                            borderColor: 'orange',
                            fill: false
                        },
                        {
                            label: 'Overall Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualOverallLevels)),
                            borderColor: 'purple',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Proficiency Level' }, min: 1, max: 10, ticks: { stepSize: 1 } }
                    }
                }
            });

            // Time to Complete chart
            const ctxTime = document.getElementById('time-chart').getContext('2d');
            const timeChart = new Chart(ctxTime, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Time Elapsed (seconds)',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.TimeElapsed)),
                            borderColor: 'brown',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Time (sec)' }, ticks: { beginAtZero: true } }
                    }
                }
            });
        });
    </script>
}
