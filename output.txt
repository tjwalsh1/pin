using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Services;
using Pinpoint_Quiz.Dtos;
using Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Controllers
{
    [Route("[controller]")]
    public class AccountController : Controller
    {
        private readonly AccountService _accountService;
        private readonly ILogger<AccountController> _logger;
        private readonly AccoladeService _accoladeService;

        public AccountController(AccountService accountService, ILogger<AccountController> logger, AccoladeService accoladeService)
        {
            _accountService = accountService;
            _logger = logger;
            _accoladeService = accoladeService;
        }

        // GET: /Account/Register
        [HttpGet("register")]
        public IActionResult Register()
        {
            return View();
        }

        // POST: /Account/Register
        [HttpPost("register")]
        public IActionResult Register(RegisterDto dto)
        {
            if (!ModelState.IsValid)
            {
                return View(dto);
            }

            bool registered = _accountService.RegisterUser(dto);
            if (!registered)
            {
                ModelState.AddModelError("", "Registration failed. Email might be in use.");
                return View(dto);
            }

            // Auto-login
            int? userId = _accountService.LoginUser(dto.Email, dto.Password);
            if (userId.HasValue)
            {
                HttpContext.Session.SetInt32("UserId", userId.Value);

                // Optionally store initials in session
                var initials = $"{dto.FirstName?[0]}{dto.LastName?[0]}".ToUpper();
                HttpContext.Session.SetString("UserInitials", initials);

                return RedirectToAction("Profile");
            }
            return RedirectToAction("Login");
        }

        // GET: /Account/Login
        [HttpGet("login")]
        public IActionResult Login(string returnUrl = null)
        {
            ViewData["ReturnUrl"] = returnUrl;
            return View();
        }

        // POST: /Account/Login
        [HttpPost("login")]
        public IActionResult Login(LoginDto dto)
        {
            var userId = _accountService.LoginUser(dto.Email, dto.Password);
            if (!userId.HasValue)
            {
                ModelState.AddModelError("", "Invalid credentials.");
                ViewBag.ErrorMessage = "Invalid email or password.";
                return View(dto);
            }
            HttpContext.Session.SetInt32("UserId", userId.Value);

            // Optional: store user initials
            var user = _accountService.GetUserById(userId.Value);
            if (user != null)
            {
                var initials = $"{user.FirstName[0]}{user.LastName[0]}".ToUpper();
                HttpContext.Session.SetString("UserInitials", initials);
                HttpContext.Session.SetString("UserRole", user.UserRole);
            }

            return RedirectToAction("Profile");
        }

        // GET: /Account/Profile
        [HttpGet("profile")]
        public IActionResult Profile()
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue)
            {
                return RedirectToAction("Login");
            }

            var user = _accountService.GetUserById(userId.Value);
            if (user == null)
            {
                return RedirectToAction("Login");
            }

            var accolades = _accoladeService.GetAccoladesForUser(userId.Value);

            // If you want to show recent quizzes or accolades, fetch them here:
            var profileVm = new ProfileViewModel
            {
                UserId = user.Id,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                Grade = user.Grade ?? 0,
                ClassId = user.ClassId ?? 0,
                SchoolId = user.SchoolId ?? 0,
                ProficiencyMath = user.ProficiencyMath,
                ProficiencyEbrw = user.ProficiencyEbrw,
                OverallProficiency = user.OverallProficiency,
                // Additional properties if needed
                Dates = new System.Collections.Generic.List<string>(),
                MathProficiencies = new System.Collections.Generic.List<double>(),
                EbrwProficiencies = new System.Collections.Generic.List<double>(),
                Accolades = accolades
            };

            // Example: fetch user accolades from your Accolade table
            // profileVm.Accolades = accoladeService.GetAccoladesForUser(user.Id);

            // Example: fetch last 5 quizzes
            // profileVm.RecentQuizzes = quizService.GetQuizHistory(user.Id)
            //                                     .Take(5)
            //                                     .ToList();

            return View(profileVm);
        }

        // POST: /Account/Logout
        [HttpPost("logout")]
        public IActionResult Logout()
        {
            HttpContext.Session.Clear();
            _logger.LogInformation("User logged out.");
            return RedirectToAction("Login");
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Linq;
using Pinpoint_Quiz.Helpers;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Services;

namespace Pinpoint_Quiz.Controllers
{
    [RoleAuthorize("Teacher", "Administrator")]
    [Route("[controller]")]
    public class ClassController : Controller
    {
        private readonly ClassPerformanceService _classPerf;
        private readonly UserService _userService;

        public ClassController(ClassPerformanceService classPerf, UserService userService)
        {
            _classPerf = classPerf;
            _userService = userService;
        }

        [HttpGet("")]
        public IActionResult Index(int? teacherId, bool allSchool = false)
        {
            var role = HttpContext.Session.GetString("UserRole");
            var userId = HttpContext.Session.GetInt32("UserId");
            if (string.IsNullOrEmpty(role) || !userId.HasValue)
                return RedirectToAction("Login", "Account");

            ClassIndexViewModel model = new ClassIndexViewModel();
            if (role == "Teacher")
            {
                // For teacher: get the teacher’s own class.
                var teacher = _userService.GetUserById(userId.Value);
                if (teacher == null)
                    return Forbid();
                model = _classPerf.GetClassPerformance(teacher.ClassId ?? 0, false);
            }
            else // Administrator
            {
                var admin = _userService.GetUserById(userId.Value);
                int schoolId = admin?.SchoolId ?? 0;
                var teachers = _userService.GetTeachersBySchool(schoolId);
                model.TeacherDropdown = teachers
                    .Select(t => new TeacherOption { TeacherId = t.Id, TeacherName = t.FirstName + " " + t.LastName })
                    .ToList();

                if (allSchool)
                {
                    model = _classPerf.GetSchoolPerformance(schoolId);
                    model.ShowWholeSchool = true;
                }
                else if (teacherId.HasValue)
                {
                    var teacher = teachers.FirstOrDefault(t => t.Id == teacherId.Value);
                    if (teacher == null) return Forbid();
                    model = _classPerf.GetClassPerformance(teacher.ClassId ?? 0, true);
                    model.SelectedTeacherId = teacherId;
                }
                else
                {
                    model = _classPerf.GetSchoolPerformance(schoolId);
                    model.ShowWholeSchool = true;
                }
            }

            return View(model);
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using System;
using Pinpoint_Quiz.Services;

namespace Pinpoint_Quiz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DatabaseController : ControllerBase
    {
        private readonly SQLiteDatabase _database;

        public DatabaseController(SQLiteDatabase database)
        {
            _database = database;
        }

        // Example snippet to manually re-init DB
        [HttpPost("initialize")]
        public IActionResult InitializeDatabase()
        {
            try
            {
                using var connection = _database.GetConnection();
                using var command = connection.CreateCommand();
                command.CommandText = @"
                    CREATE TABLE IF NOT EXISTS Users (
                        Id INTEGER PRIMARY KEY AUTOINCREMENT,
                        Email TEXT NOT NULL UNIQUE,
                        PasswordHash TEXT NOT NULL,
                        FirstName TEXT NOT NULL,
                        LastName TEXT NOT NULL,
                        Grade INTEGER,
                        ClassId INTEGER,
                        SchoolId INTEGER,
                        ProficiencyMath REAL DEFAULT 1.0,
                        ProficiencyEbrw REAL DEFAULT 1.0,
                        OverallProficiency REAL DEFAULT 1.0,
                        AvgQuizTime REAL DEFAULT 0.0,
                        UserRole TEXT NOT NULL DEFAULT 'Student'
                    );

                    CREATE TABLE IF NOT EXISTS Performances (
                        Id INTEGER PRIMARY KEY AUTOINCREMENT,
                        UserId INTEGER NOT NULL,
                        Week DATE NOT NULL,
                        ProficiencyMath REAL NOT NULL,
                        ProficiencyEbrw REAL NOT NULL,
                        OverallProficiency REAL NOT NULL,
                        FOREIGN KEY (UserId) REFERENCES Users(Id)
                    );

                    CREATE TABLE IF NOT EXISTS Questions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        subject TEXT NOT NULL,
                        difficulty INTEGER NOT NULL,
                        passage TEXT,
                        question_prompt TEXT NOT NULL,
                        correct_answer TEXT NOT NULL,
                        wrong_answer1 TEXT NOT NULL,
                        wrong_answer2 TEXT NOT NULL,
                        wrong_answer3 TEXT NOT NULL,
                        explanation TEXT NOT NULL
                    );

                    CREATE TABLE IF NOT EXISTS Quizzes (
                        Id INTEGER PRIMARY KEY AUTOINCREMENT,
                        Title TEXT NOT NULL,
                        Description TEXT,
                        CreatedAt DATE NOT NULL DEFAULT (datetime('now'))
                    );

                    CREATE TABLE IF NOT EXISTS QuizSubmissions (
                        SubmissionId INTEGER PRIMARY KEY AUTOINCREMENT,
                        QuizId INTEGER NOT NULL,
                        UserId INTEGER NOT NULL,
                        QuestionId INTEGER NOT NULL,
                        SelectedAnswer TEXT NOT NULL,
                        IsCorrect INTEGER NOT NULL CHECK (IsCorrect IN (0, 1)),
                        FOREIGN KEY (QuizId) REFERENCES Quizzes(Id),
                        FOREIGN KEY (UserId) REFERENCES Users(Id),
                        FOREIGN KEY (QuestionId) REFERENCES Questions(Id)
                    );

                    -- Additional tables as needed...
                ";
                command.ExecuteNonQuery();

                return Ok("Database initialized.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Initialization failed: {ex.Message}");
            }
        }
    }
}
using Microsoft.AspNetCore.Mvc;

namespace Pinpoint_Quiz.Controllers
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            // A simple home page
            return View(); // Views/Home/Index.cshtml
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Pinpoint_Quiz.Services;
using Pinpoint_Quiz.Models;
using System.Collections.Generic;
using Pinpoint_Quiz.Models.Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Controllers
{
    [Route("[controller]")]
    public class LessonsController : Controller
    {
        private readonly LessonService _lessonService;

        public LessonsController(LessonService lessonService)
        {
            _lessonService = lessonService;
        }

        [HttpGet("")]
        public IActionResult Index(string subject = null)
        {
            List<Lesson> lessons = _lessonService.GetAllLessons(subject);
            return View(lessons);
        }

        [HttpGet("details/{id}")]
        public IActionResult Details(int id)
        {
            Lesson lesson = _lessonService.GetLesson(id);
            if (lesson == null)
            {
                return NotFound();
            }
            return View(lesson);
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Services;
using System.Linq;
using Pinpoint_Quiz.Dtos;

namespace Pinpoint_Quiz.Controllers
{
    [Route("Performances")]
    public class PerformancesController : Controller
    {
        private readonly QuizService _quizService;

        public PerformancesController(QuizService quizService)
        {
            _quizService = quizService;
        }

        // This action accepts an optional query parameter "userId"
        [HttpGet("Progress")]
        public IActionResult Progress(int? userId)
        {
            // Get the signed-in user's id from session
            int currentUserId = HttpContext.Session.GetInt32("UserId") ?? 0;
            string role = HttpContext.Session.GetString("UserRole") ?? "Student";

            // Allow teachers/administrators to view progress for a different user if "userId" is supplied.
            int effectiveUserId = (role == "Teacher" || role == "Administrator") && userId.HasValue
                ? userId.Value
                : currentUserId;

            // Retrieve quiz history for effectiveUserId (your actual implementation may vary)
            var history = _quizService.GetLast10Quizzes(effectiveUserId)
                           .OrderBy(q => q.QuizDate)
                           .ToList();

            var model = new PerformanceChartViewModel
            {
                LabelDates = history.Select(q => q.QuizDate.ToLocalTime().ToString("yyyy-MM-dd")).ToList(),
                MathLevels = history.Select(q => q.MathProficiency).ToList(),
                EbrwLevels = history.Select(q => q.EbrwProficiency).ToList(),
                // (Set your actual proficiency arrays if available)
                ActualMathLevels = history.Select(q => q.ActualMathProficiency).ToList(),
                ActualEbrwLevels = history.Select(q => q.ActualEbrwProficiency).ToList(),
                ActualOverallLevels = history.Select(q => q.ActualOverallProficiency).ToList(),
                TimeElapsed = history.Select(q => q.TimeElapsed).ToList(),
                QuizHistory = history.Select(q => new QuizHistoryDto
                {
                    QuizDate = q.QuizDate,
                    MathProficiency = q.MathProficiency,
                    EbrwProficiency = q.EbrwProficiency,
                    OverallProficiency = q.OverallProficiency,
                    MathCorrect = q.MathCorrect,
                    EbrwCorrect = q.EbrwCorrect,
                    MathTotal = q.MathTotal,
                    EbrwTotal = q.EbrwTotal,
                    QuizId = q.Id,
                    ActualMathProficiency = q.ActualMathProficiency,
                    ActualEbrwProficiency = q.ActualEbrwProficiency,
                    ActualOverallProficiency = q.ActualOverallProficiency
                }).ToList()
            };

            return View(model);
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Pinpoint_Quiz.Services;
using Pinpoint_Quiz.Dtos;
using System.Collections.Generic;

namespace Pinpoint_Quiz.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class QuizzesApiController : ControllerBase
    {
        private readonly QuizService _quizService;

        public QuizzesApiController(QuizService quizService)
        {
            _quizService = quizService;
        }

        // POST: /api/QuizzesApi/generate?studentId=123&adaptive=true
        [HttpPost("generate")]
        public IActionResult GenerateQuiz([FromQuery] int studentId, [FromQuery] bool adaptive = false)
        {
            List<QuestionDto> mathQuestions;
            List<QuestionDto> ebrwQuestions;

            if (adaptive)
            {
                mathQuestions = _quizService.GenerateAdaptiveQuiz(studentId, "Math", 10);
                ebrwQuestions = _quizService.GenerateAdaptiveQuiz(studentId, "EBRW", 10);
            }
            else
            {
                mathQuestions = _quizService.GenerateNonAdaptiveQuiz(studentId, "Math", 10);
                ebrwQuestions = _quizService.GenerateNonAdaptiveQuiz(studentId, "EBRW", 10);
            }

            return Ok(new
            {
                StudentId = studentId,
                MathQuestions = mathQuestions,
                EbrwQuestions = ebrwQuestions
            });
        }

        // POST: /api/QuizzesApi/submit?studentId=123&quizId=1
        [HttpPost("submit")]
        public IActionResult SubmitQuiz([FromQuery] int studentId, [FromQuery] int quizId, [FromBody] QuizSubmissionDto submission)
        {
            bool success = _quizService.SubmitQuiz(studentId, quizId, submission);
            if (!success)
            {
                return StatusCode(500, "Failed to submit quiz");
            }
            return Ok("Quiz submitted successfully");
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Services;
using System;
using System.Linq;
using Pinpoint_Quiz.Helpers;
using Pinpoint_Quiz.Dtos;

namespace Pinpoint_Quiz.Controllers
{
    [Route("[controller]")]
    public class QuizzesController : Controller
    {
        private readonly QuizService _quizService;
        private readonly AccoladeService _accoladeService;
        private readonly ILogger<QuizzesController> _logger;

        public QuizzesController(QuizService quizService, AccoladeService accoladeService, ILogger<QuizzesController> logger)
        {
            _quizService = quizService;
            _accoladeService = accoladeService;
            _logger = logger;
        }

        [HttpGet("")]
        public IActionResult Index()
        {
            int? userId = HttpContext.Session.GetInt32("UserId");
            double startingDifficulty = 0;
            if (userId.HasValue)
            {
                double math = _quizService.GetUserProficiency(userId.Value, "Math");
                double ebrw = _quizService.GetUserProficiency(userId.Value, "EBRW");
                startingDifficulty = (math + ebrw) / 2.0;
            }
            var model = new QuizzesIndexViewModel
            {
                StartingDifficulty = startingDifficulty,
                IsLoggedIn = userId.HasValue
            };
            return View(model);
        }

        // Start an adaptive quiz
        [HttpGet("start-adaptive")]
        public IActionResult StartAdaptive()
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue) return RedirectToAction("Login", "Account");

            var quizSession = new QuizSession
            {
                UserId = userId.Value,
                IsAdaptive = true,
                LocalMath = _quizService.GetUserProficiency(userId.Value, "Math"),
                LocalEbrw = _quizService.GetUserProficiency(userId.Value, "EBRW"),
                TimeStarted = DateTime.Now  // Record the start time here

            };

            HttpContext.Session.SetObject("QuizSession", quizSession);
            return RedirectToAction("NextQuestion");
        }

        // Serve the next question
        [HttpGet("NextQuestion")]
        public IActionResult NextQuestion()
        {
            var quizSession = HttpContext.Session.GetObject<QuizSession>("QuizSession");
            if (quizSession == null) return RedirectToAction("Index");

            // If we've asked enough questions, go to Submit
            if (quizSession.CurrentIndex >= quizSession.TotalQuestions)
                return RedirectToAction("SubmitQuiz");

            // Example logic: alternate EBRW and Math
            // Or do 5 EBRW first, then 5 Math. Up to you.
            bool doEbrw = (quizSession.EbrwCount < 5);

            var question = doEbrw
                ? _quizService.GetQuestionByDifficulty("EBRW", (int)Math.Round(quizSession.LocalEbrw))
                : _quizService.GetQuestionByDifficulty("Math", (int)Math.Round(quizSession.LocalMath));

            // Add to session record
            quizSession.Questions.Add(new QuestionRecord
            {
                Subject = question.Subject,
                Dto = question,
                UserCorrect = null
            });

            if (doEbrw) quizSession.EbrwCount++;
            else quizSession.MathCount++;

            quizSession.CurrentIndex++;
            HttpContext.Session.SetObject("QuizSession", quizSession);

            return View("SingleQuestion", new SingleQuestionViewModel
            {
                StudentId = quizSession.UserId,
                QuestionNumber = quizSession.CurrentIndex,
                TotalQuestions = quizSession.TotalQuestions,
                Prompt = question.QuestionPrompt,
                Answers = question.ShuffledAnswers,
                CorrectAnswer = question.CorrectAnswer,
                Explanation = question.Explanation,
                Difficulty = question.Difficulty,
                Subject = question.Subject,
                QuestionId = question.Id  // Make sure your QuestionDto has an Id property.
            });

        }

        // Handle answer submission from SingleQuestion
        [HttpPost("Answer")]
        public IActionResult Answer(int questionNumber, string selectedAnswer, string correctAnswer, string subject)
        {
            var quizSession = HttpContext.Session.GetObject<QuizSession>("QuizSession");
            if (quizSession == null) return RedirectToAction("Index");

            bool isCorrect = selectedAnswer == correctAnswer;

            // Store selected answer in the quizSession.
            // We'll reference this later in SubmitQuiz.
            quizSession.Questions[questionNumber - 1].UserCorrect = isCorrect;
            quizSession.Questions[questionNumber - 1].Dto.YourAnswer = selectedAnswer; // <== new line

            // (Optional) Save question response in a table if you want:
            _quizService.SaveQuestionResponse(
                quizSession.UserId,
                quizSession.QuizId,
                quizSession.Questions[questionNumber - 1].Dto.QuestionPrompt,
                selectedAnswer,
                isCorrect
            );

            // If adaptive, adjust local proficiency
            if (quizSession.IsAdaptive)
            {
                if (subject == "Math")
                {
                    quizSession.LocalMath = isCorrect
                        ? quizSession.LocalMath + 0.5
                        : Math.Max(1, quizSession.LocalMath - 1);
                }
                else
                {
                    quizSession.LocalEbrw = isCorrect
                        ? quizSession.LocalEbrw + 0.5
                        : Math.Max(1, quizSession.LocalEbrw - 1);
                }
            }

            HttpContext.Session.SetObject("QuizSession", quizSession);

            return RedirectToAction("NextQuestion");
        }

        [HttpGet("start-retake")]
        public IActionResult StartRetake()
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue)
                return RedirectToAction("Login", "Account");

            // Retrieve the most recent quiz result for this user.
            var latestResult = _quizService.GetLatestQuizResult(userId.Value);
            if (latestResult == null || latestResult.QuestionResults == null || latestResult.QuestionResults.Count == 0)
            {
                TempData["ErrorMessage"] = "No previous quiz found to retake.";
                return RedirectToAction("Index");
            }

            // Create a new QuizSession using the same question set from the most recent quiz.
            var newSession = new QuizSession
            {
                UserId = userId.Value,
                IsAdaptive = false, // or copy from the original if needed
                                    // Use the proficiency values from the latest quiz result (or set defaults)
                LocalMath = latestResult.FinalProficiencyMath,
                LocalEbrw = latestResult.FinalProficiencyEbrw,
                QuizId = 0, // new attempt; this will generate a new QuizResults row on submission
                RetakeMode = true // Mark this as a retake if you want to check it later (for logging, UI, etc.)
            };

            // For each question from the latest quiz result, add a new QuestionRecord to the session.
            // (This copies the question details but does not copy over any answers.)
            foreach (var q in latestResult.QuestionResults)
            {
                var qDto = new QuestionDto
                {
                    // Copy over the question details
                    QuestionPrompt = q.QuestionPrompt,
                    CorrectAnswer = q.CorrectAnswer,
                    Explanation = q.Explanation,
                    Difficulty = q.Difficulty,
                    Subject = q.Subject,
                    // Do NOT copy qDto.YourAnswer; let it remain null.
                    // Also copy wrong answers if applicable.
                };

                newSession.Questions.Add(new QuestionRecord
                {
                    Subject = qDto.Subject,
                    Dto = qDto,
                    UserCorrect = null
                });
            }

            // Log for debugging:
            _logger.LogInformation("StartRetake: New session created with {Count} questions; RetakeMode set to {RetakeMode}.", newSession.Questions.Count, newSession.RetakeMode);

            // Save the new session in the user session.
            HttpContext.Session.SetObject("QuizSession", newSession);

            // Redirect to the first question of the new quiz.
            return RedirectToAction("NextQuestion");
        }




        [HttpGet("SubmitQuiz")]
        public IActionResult SubmitQuiz()
        {
            var quizSession = HttpContext.Session.GetObject<QuizSession>("QuizSession");
            if (quizSession == null)
                return RedirectToAction("Index");

            int correctMath = quizSession.Questions.Count(q => q.Subject == "Math" && q.UserCorrect == true);
            int correctEbrw = quizSession.Questions.Count(q => q.Subject == "EBRW" && q.UserCorrect == true);
            int totalMath = quizSession.Questions.Count(q => q.Subject == "Math");
            int totalEbrw = quizSession.Questions.Count(q => q.Subject == "EBRW");

            var questionResults = quizSession.Questions
                .Where(q => q.Dto != null)
                .Select(q => new QuestionResultDto
                {
                    QuestionPrompt = q.Dto.QuestionPrompt,
                    YourAnswer = q.Dto.YourAnswer,  // <== Pull the stored answer
                    CorrectAnswer = q.Dto.CorrectAnswer,
                    Explanation = q.Dto.Explanation,
                    IsCorrect = q.UserCorrect ?? false,
                    Subject = q.Subject,
                    Difficulty = q.Dto.Difficulty
                }).ToList();
            var retakeMode = quizSession.RetakeMode;
            DateTime timeStarted = quizSession.TimeStarted;
            DateTime timeEnded = DateTime.Now;
            double timeElapsed = (timeEnded - timeStarted).TotalSeconds;

            // Update actual proficiency:            
            _quizService.UpdateActualProficiency(quizSession.UserId, questionResults, quizSession.RetakeMode);

            // Retrieve updated actual profs if you store them:
            var (actualMath, actualEbrw, actualOverall) = _quizService.GetActualProficiencies(quizSession.UserId);

            int quizId = _quizService.SaveQuizResults(
                quizSession.UserId,
                quizSession.LocalMath,
                quizSession.LocalEbrw,
                (quizSession.LocalMath + quizSession.LocalEbrw) / 2.0,
                correctMath,
                correctEbrw,
                totalMath,
                totalEbrw,
                questionResults,
                actualMath, actualEbrw, actualOverall, timeStarted, timeEnded, timeElapsed
            );

            // Once everything is done:
            var newlyAwarded = _accoladeService.CheckAndAwardAccolades(
                quizSession.UserId,
                quizSession.RetakeMode,
                correctMath + correctEbrw, // total correct
                totalMath + totalEbrw      // total questions
            );

            if (newlyAwarded.Any())
            {
                ViewBag.AccoladeMessage = "Congrats! You earned new accolade(s): " + string.Join(", ", newlyAwarded);
            }
            TempData["AccoladeMessage"] = "Congrats! You earned a new accolade!";

            HttpContext.Session.Remove("QuizSession");

            return RedirectToAction("Results", new { quizId });
        }

        // Show quiz results
        [HttpGet("Results")]
        public IActionResult Results(int quizId)
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue)
            {
                return RedirectToAction("Login", "Account");
            }

            var results = _quizService.GetQuizResults(userId.Value, quizId);

            // If no results were found or the question details list is empty, show a fallback view.
            if (results == null || results.QuestionResults == null || results.QuestionResults.Count == 0)
            {
                return View("NoResults");
            }

            // Otherwise, assign the StudentId (if needed)
            results.StudentId = userId.Value;
            return View("QuizResults", results);
        }
        [HttpGet("DisplayQuestion")]
        public IActionResult DisplayQuestion(int questionNumber)
        {
            var quizSession = HttpContext.Session.GetObject<QuizSession>("QuizSession");
            if (quizSession == null)
                return RedirectToAction("Index");

            // Validate question number
            if (questionNumber < 1 || questionNumber > quizSession.Questions.Count)
                return RedirectToAction("SubmitQuiz"); // Or handle error appropriately

            // Retrieve the question record from the session
            var questionRecord = quizSession.Questions[questionNumber - 1];

            // Build the view model using the data from the questionRecord's Dto
            var viewModel = new SingleQuestionViewModel
            {
                StudentId = quizSession.UserId,
                QuestionNumber = questionNumber, // use the passed question number
                TotalQuestions = quizSession.TotalQuestions,
                Prompt = questionRecord.Dto.QuestionPrompt,
                Answers = questionRecord.Dto.ShuffledAnswers,
                CorrectAnswer = questionRecord.Dto.CorrectAnswer,
                Explanation = questionRecord.Dto.Explanation,
                Difficulty = questionRecord.Dto.Difficulty,
                Subject = questionRecord.Subject,
                QuestionId = questionRecord.Dto.Id  // Assuming QuestionDto has an Id property
            };

            return View("SingleQuestion", viewModel);
        }

        [HttpPost("ReportQuestion")]
        public IActionResult ReportQuestion(int questionNumber, int id) // 'id' is the question id from the Questions table
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue)
            {
                return RedirectToAction("Login", "Account");
            }

            // Log the report with the provided question id.
            _quizService.LogQuestionReport(userId.Value, id, "User reported question");

            TempData["ReportMessage"] = "The question has been reported. Thank you!";

            // Redirect to NextQuestion so the reported question is skipped.
            return RedirectToAction("NextQuestion");
        }

    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Pinpoint_Quiz.Helpers;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Services;

namespace Pinpoint_Quiz.Controllers
{
    [RoleAuthorize("Administrator")]
    [Route("School")]
    public class SchoolController : Controller
    {
        private readonly SchoolPerformanceService _schoolPerf;
        private readonly UserService _userService;

        public SchoolController(SchoolPerformanceService schoolPerf, UserService userService)
        {
            _schoolPerf = schoolPerf;
            _userService = userService;
        }

        [HttpGet("")]
        public IActionResult Index(int? teacherId, bool allSchool = false)
        {
            var userId = HttpContext.Session.GetInt32("UserId");
            if (!userId.HasValue)
                return RedirectToAction("Login", "Account");

            // Get the admin's record to retrieve the schoolId.
            var admin = _userService.GetUserById(userId.Value);
            if (admin == null || admin.SchoolId == null)
                return Forbid();

            int schoolId = admin.SchoolId.Value;

            SchoolIndexViewModel model = new SchoolIndexViewModel();

            // Populate teacher dropdown using the service.
            model.Teachers = _schoolPerf.GetTeacherRowsForSchool(schoolId);

            if (allSchool)
            {
                model = _schoolPerf.GetSchoolPerformance(schoolId);
            }
            else if (teacherId.HasValue)
            {
                // Optionally: you might filter to a specific teacher's class.
                // For now, we simply note the teacher selection.
                model = _schoolPerf.GetSchoolPerformance(schoolId);
                model.SelectedTeacherId = teacherId;
            }
            else
            {
                // Default to whole school view.
                model = _schoolPerf.GetSchoolPerformance(schoolId);
            }

            return View(model);
        }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class AccoladeDto
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Icon { get; set; }  // Optional: FontAwesome icon, emoji, etc.
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class AdaptiveQuizAnswerDto
    {
        public int StudentId { get; set; }
        public int QuestionNumber { get; set; }
        public string mathPrompt { get; set; }
        public string correctMathAnswer { get; set; }
        public string selectedMathAnswer { get; set; }

        public string ebrwPrompt { get; set; }
        public string correctEbrwAnswer { get; set; }
        public string selectedEbrwAnswer { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class AdaptiveSubmissionDto
    {
        public int StudentId { get; set; }
        public int QuestionNumber { get; set; }
        public string SelectedMathAnswer { get; set; }
        public string CorrectMathAnswer { get; set; }
        public string SelectedEbrwAnswer { get; set; }
        public string CorrectEbrwAnswer { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class AnswerDto
    {
        public double Difficulty { get; set; }
        public double ProficiencyLevel { get; set; }
        public bool IsCorrect { get; set; }
    }
}
﻿using System.ComponentModel.DataAnnotations;

namespace Pinpoint_Quiz.Dtos
{
    public class LoginDto
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        public string ReturnUrl { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class NonAdaptiveQuizAnswerDto
    {
        public int StudentId { get; set; }
        public int QuestionNumber { get; set; }
        public string mathPrompt { get; set; }
        public string correctMathAnswer { get; set; }
        public string selectedMathAnswer { get; set; }

        public string ebrwPrompt { get; set; }
        public string correctEbrwAnswer { get; set; }
        public string selectedEbrwAnswer { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class NonAdaptiveSubmissionDto
    {
        public int StudentId { get; set; }
        public string Subject { get; set; }

        public Dictionary<int, string> AnswersMath { get; set; }
        public Dictionary<int, string> AnswersEbrw { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class PerformanceDto
    {
        public int StudentId { get; set; }
        public DateTime Week { get; set; }
        public double ProficiencyMath { get; set; }
        public double ProficiencyEbrw { get; set; }
        public double OverallProficiency { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class QuestionDto
    {
        public int Id { get; set; }
        public string QuestionPrompt { get; set; }
        public string CorrectAnswer { get; set; }
        public List<string> WrongAnswers { get; set; } = new List<string>();
        public string Explanation { get; set; }
        public double Difficulty { get; set; }
        public string Subject { get; set; }
        public string YourAnswer { get; set; } // store user’s selected answer

        public List<string> ShuffledAnswers
        {
            get
            {
                var all = new List<string>(WrongAnswers);
                if (!string.IsNullOrEmpty(CorrectAnswer))
                {
                    all.Add(CorrectAnswer);
                }

                var rnd = new Random();
                for (int i = all.Count - 1; i > 0; i--)
                {
                    int swapIdx = rnd.Next(i + 1);
                    (all[i], all[swapIdx]) = (all[swapIdx], all[i]);
                }
                return all;
            }
        }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class QuestionResultDto
    {
        public string QuestionPrompt { get; set; }
        public string YourAnswer { get; set; }
        public string CorrectAnswer { get; set; }
        public string Explanation { get; set; }
        public bool IsCorrect { get; set; }
        public string Subject { get; set; }
        public double Difficulty { get; set; }
        public bool RetakeMode { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class QuizSubmissionDto
    {
        public List<AnswerDto> EbrwAnswers { get; set; } = new List<AnswerDto>();
        public int QuizId { get; set; }
        public List<AnswerDto> MathAnswers { get; set; } = new List<AnswerDto>();
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class QuizHistoryDto
    {
        public int Id { get; set; }
        public DateTime QuizDate { get; set; }
        public double MathProficiency { get; set; }
        public double EbrwProficiency { get; set; }
        public double OverallProficiency { get; set; }
        public int MathCorrect { get; set; }
        public int EbrwCorrect { get; set; }
        public int MathTotal { get; set; }
        public int EbrwTotal { get; set; }
        public int QuizId { get; set; }
        public double ActualOverallProficiency { get; set; }
        public double ActualMathProficiency { get; set; }
        public double ActualEbrwProficiency { get; set; }
        public DateTime TimeStarted { get; set; }
        public DateTime TimeEnded { get; set; }
        public double TimeElapsed { get; set; }
    }
}
﻿namespace Pinpoint_Quiz.Dtos
{
    public class RecentQuizDto
    {
        public int Id { get; set; }
        public string DateTaken { get; set; }  // Store date as string for easy UI rendering
    }
}
﻿using System.ComponentModel.DataAnnotations;

namespace Pinpoint_Quiz.Dtos
{
    public class RegisterDto
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        public int Grade { get; set; }

        [Required]
        public int ClassId { get; set; }

        [Required]
        public int SchoolId { get; set; }

        [Required]
        public string UserRole { get; set; } = "Student";
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Pinpoint_Quiz.Helpers
{
    public class RoleAuthorizeAttribute : ActionFilterAttribute
    {
        private readonly string[] _roles;
        public RoleAuthorizeAttribute(params string[] roles)
        {
            _roles = roles;
        }

        public override void OnActionExecuting(ActionExecutingContext context)
        {
            var userRole = context.HttpContext.Session.GetString("UserRole");
            if (string.IsNullOrEmpty(userRole) || !_roles.Contains(userRole))
            {
                context.Result = new ForbidResult();
            }
        }
    }
}
﻿using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;

namespace Pinpoint_Quiz.Helpers
{
    public static class SessionExtensions
    {
        public static void SetObject(this ISession session, string key, object value)
        {
            var json = JsonConvert.SerializeObject(value);
            session.SetString(key, json);
        }

        public static T GetObject<T>(this ISession session, string key)
        {
            var json = session.GetString(key);
            if (string.IsNullOrEmpty(json)) return default;
            return JsonConvert.DeserializeObject<T>(json);
        }
    }
}
﻿using System;
using System.Collections.Generic;

namespace Pinpoint_Quiz.Models
{
    public class ClassIndexViewModel
    {
        // Indicates if the current user is an administrator
        public bool IsAdmin { get; set; }
        // If admin: allow selection of a teacher or whole school.
        public int? SelectedTeacherId { get; set; }
        public bool ShowWholeSchool { get; set; }
        public List<TeacherOption> TeacherDropdown { get; set; } = new List<TeacherOption>();

        // Chart data for daily averages (last 30 days)
        public List<string> DailyDates { get; set; } = new List<string>();
        public List<double> DailyAverages { get; set; } = new List<double>();

        // Chart data for weekly averages (last 6 months)
        public List<string> WeeklyLabels { get; set; } = new List<string>();
        public List<double> WeeklyAverages { get; set; } = new List<double>();

        // Table data: a list of students in the class or school
        public List<StudentRow> Students { get; set; } = new List<StudentRow>();
    }

    public class StudentRow
    {
        public int StudentId { get; set; }
        public string Name { get; set; }
        public int QuizCount { get; set; }
        public DateTime? LastQuizDate { get; set; }
    }

    namespace Pinpoint_Quiz.Models
    {
        public class AvgData
        {
            // For daily averages, use DateLabel; for weekly, use WeekLabel.
            public string DateLabel { get; set; }
            public string WeekLabel { get; set; }
            public double AverageProf { get; set; }
        }
    }

}
﻿namespace Pinpoint_Quiz.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int? Grade { get; set; }
        public int? ClassId { get; set; }
        public int? SchoolId { get; set; }
        public double ProficiencyMath { get; set; }
        public double ProficiencyEbrw { get; set; }
        public double OverallProficiency { get; set; }
        public double AvgQuizTime { get; set; }
        public string UserRole { get; set; }
    }
}

namespace Pinpoint_Quiz.Models
{
    public class Performance
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public DateTime Week { get; set; }
        public double ProficiencyMath { get; set; }
        public double ProficiencyEbrw { get; set; }
        public double OverallProficiency { get; set; }
    }
}

public class Quiz
{
    public int Id { get; set; }
    public int StudentId { get; set; }
    public string Questions { get; set; } // JSON string of questions
    public double? Score { get; set; }

    public string Title { get; set; }
    public string Description { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}

// History of quizzes taken
public class QuizHistoryRecord
{
    public int Id { get; set; }           // PK
    public int UserId { get; set; }
    public DateTime QuizDate { get; set; }
    public double MathProficiency { get; set; }
    public double EbrwProficiency { get; set; }
    public double OverallProficiency { get; set; }
    public int MathCorrect { get; set; }
    public int EbrwCorrect { get; set; }
    public int MathTotal { get; set; }
    public int EbrwTotal { get; set; }
    public double ActualMathProficiency { get; set; }
    public double ActualEbrwProficiency { get; set; }
    public double ActualOverallProficiency { get; set; }
    public double TimeElapsed { get; set; }
}
﻿using System;
using System.Collections.Generic;

namespace Pinpoint_Quiz.Models
{
    public class SchoolIndexViewModel
    {
        // Indicates if the view is for the whole school (default) or a particular teacher.
        public bool ShowWholeSchool { get; set; }
        public int? SelectedTeacherId { get; set; }
        // Dropdown for teachers
        public List<TeacherOption> TeacherDropdown { get; set; } = new List<TeacherOption>();

        // Chart data for daily averages (last 30 days)
        public List<string> DailyDates { get; set; } = new List<string>();
        public List<double> DailyAverages { get; set; } = new List<double>();

        // Chart data for weekly averages (last 6 months)
        public List<string> WeeklyLabels { get; set; } = new List<string>();
        public List<double> WeeklyAverages { get; set; } = new List<double>();

        // Table data: list of teachers in the school
        public List<TeacherRow> Teachers { get; set; } = new List<TeacherRow>();
    }

    public class TeacherOption
    {
        public int TeacherId { get; set; }
        public string TeacherName { get; set; }
    }

    public class TeacherRow
    {
        public int TeacherId { get; set; }
        public string Name { get; set; }
        public int QuizCount { get; set; }
        public DateTime? LastQuizDate { get; set; }
    }
}
﻿using Pinpoint_Quiz.Dtos;
using System.Collections.Generic;

namespace Pinpoint_Quiz.Models
{
    public class AdaptiveQuizViewModel
    {
        public int StudentId { get; set; }
        public int QuestionNumber { get; set; }
        public int TotalQuestions { get; set; }
        public Dtos.QuestionDto EbrwQuestion { get; set; }
        public Dtos.QuestionDto MathQuestion { get; set; }
    }
}

namespace Pinpoint_Quiz.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }
        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

namespace Pinpoint_Quiz.Models
{
    public class NonAdaptiveQuizViewModel
    {
        public int StudentId { get; set; }
        public string Subject { get; set; }
        public List<QuestionDto> MathQuestions { get; set; }
        public List<QuestionDto> EbrwQuestions { get; set; }
    }
}

namespace Pinpoint_Quiz.Models
{
    public class PerformanceChartViewModel
    {
        public List<string> LabelDates { get; set; } = new List<string>();
        public List<double> MathLevels { get; set; } = new List<double>();
        public List<double> EbrwLevels { get; set; } = new List<double>();
        public List<double> OverallLevels { get; set; } = new List<double>();
        public bool IsLoggedIn { get; set; }
        public List<double> TimeElapsed { get; set; } = new List<double>();

        //public List<double> TimeElapsed { get; set; } = new List<double>();
        public List<QuizHistoryDto> QuizHistory { get; set; } = new List<QuizHistoryDto>();
        // New properties for actual proficiency levels:
        public List<double> ActualMathLevels { get; set; } = new List<double>();
        public List<double> ActualEbrwLevels { get; set; } = new List<double>();
        public List<double> ActualOverallLevels { get; set; } = new List<double>();
    }
}


namespace Pinpoint_Quiz.Models
{
    public class ProfileViewModel
    {
        // User Details
        public int UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public int Grade { get; set; }
        public int ClassId { get; set; }
        public int SchoolId { get; set; }
        public double ProficiencyMath { get; set; }
        public double ProficiencyEbrw { get; set; }
        public double OverallProficiency { get; set; }

        // Performance Data for Graph
        public List<string> Dates { get; set; } = new List<string>();
        public List<double> MathProficiencies { get; set; } = new List<double>();
        public List<double> EbrwProficiencies { get; set; } = new List<double>();

        // Accolades
        public List<AccoladeDto> Accolades { get; set; }

        // Recent Quizzes
        public List<QuizHistoryRecord> RecentQuizzes { get; set; } = new List<QuizHistoryRecord>();
    }
}

namespace Pinpoint_Quiz.Models
{
    public class QuizzesIndexViewModel
    {
        public double StartingDifficulty { get; set; }
        public bool IsLoggedIn { get; set; }
        public List<QuizHistoryDto> QuizHistory { get; set; } = new List<QuizHistoryDto>();

    }
}


namespace Pinpoint_Quiz.Models
{
    public class QuestionRecord
    {
        public string Subject { get; set; } // "Math" or "EBRW"
        public QuestionDto Dto { get; set; }
        public bool? UserCorrect { get; set; }
    }
}

namespace Pinpoint_Quiz.Models
{
    // Consolidated single class
    public class SingleQuestionViewModel
    {
        public int StudentId { get; set; }
        public int QuestionNumber { get; set; }
        public int TotalQuestions { get; set; }
        public string Prompt { get; set; }
        public List<string> Answers { get; set; }
        public string CorrectAnswer { get; set; }
        public string Explanation { get; set; }
        public double Difficulty { get; set; }
        public string Subject { get; set; }
        public int QuestionId { get; set; }
    }
}


namespace Pinpoint_Quiz.Models
{
    public class QuizResults
    {
        public DateTime QuizDate { get; set; }
        public int StudentId { get; set; }
        public int MathCorrect { get; set; }
        public int MathTotal { get; set; }
        public int EbrwCorrect { get; set; }
        public int EbrwTotal { get; set; }

        // Computed properties (read-only)
        public int CorrectCount => MathCorrect + EbrwCorrect;
        public int TotalCount => MathTotal + EbrwTotal;

        public List<QuestionResultDto> QuestionResults { get; set; } = new List<QuestionResultDto>();
        public double FinalProficiencyMath { get; set; }
        public double FinalProficiencyEbrw { get; set; }
        public double FinalOverallProficiency { get; set; }
        public double ActualEbrwProficiency { get; set; }
        public double ActualMathProficiency { get; set; }
        public double ActualOverallProficiency { get; set; }
        public DateTime TimeStarted { get; set; }
        public DateTime TimeEnded { get; set; }
        public double TimeElapsed { get; set; }
    }
}

namespace Pinpoint_Quiz.Models
{
    public class QuizSession
    {
        public int UserId { get; set; }
        public bool IsAdaptive { get; set; }
        public int QuizId { get; set; }
        public int CurrentIndex { get; set; } = 0;
        public int TotalQuestions => 10; // for example: 10 total
        public double LocalMath { get; set; }
        public double LocalEbrw { get; set; }
        public int EbrwCount { get; set; }
        public int MathCount { get; set; }
        public List<QuestionRecord> Questions { get; set; } = new List<QuestionRecord>();
        public bool RetakeMode { get; set; } = false;
        public DateTime TimeStarted { get; set; }

    }
    namespace Pinpoint_Quiz.Models
    {
        public class Lesson
        {
            public int Id { get; set; }
            public string Title { get; set; }
            public string Subject { get; set; }  
            public int Level { get; set; }         
            public string Content { get; set; }     
            public string VideoUrl { get; set; }     
        }
    }

}
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Pinpoint_Quiz.Services;
using Serilog;
using System;

var builder = WebApplication.CreateBuilder(args);

// Optional: Serilog
Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .CreateLogger();
builder.Host.UseSerilog();

// Register services
builder.Services.AddSingleton<SQLiteDatabase>(_ => new SQLiteDatabase("Qs9.db"));
builder.Services.AddScoped<PerformanceService>();  
builder.Services.AddScoped<QuizService>();
builder.Services.AddScoped<AccountService>();
builder.Services.AddScoped<AccoladeService>();
builder.Services.AddScoped<LessonService>();
builder.Services.AddScoped<ClassPerformanceService>();
builder.Services.AddScoped<SchoolPerformanceService>();
builder.Services.AddScoped<UserService>();


builder.Services.AddHttpContextAccessor();

builder.Services.AddControllersWithViews();

// Session
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromHours(4);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

var app = builder.Build();

if (!app.Environment.IsProduction())
{
    app.UseDeveloperExceptionPage();
}

// Initialize database (optional, remove if you rely on DatabaseController)
InitializeDatabase(app.Services);

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseSession();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}"
);

app.Run();

void InitializeDatabase(IServiceProvider services)
{
    using var scope = services.CreateScope();
    var db = scope.ServiceProvider.GetRequiredService<SQLiteDatabase>();
    using var conn = db.GetConnection();
    using var cmd = conn.CreateCommand();

    // Example: ensure QuizResults table
    cmd.CommandText = @"
        CREATE TABLE IF NOT EXISTS QuizResults (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            UserId INTEGER NOT NULL,
            QuizDate DATETIME NOT NULL DEFAULT (datetime('now')),
            MathProficiency REAL,
            EbrwProficiency REAL,
            OverallProficiency REAL,
            MathCorrect INTEGER,
            EbrwCorrect INTEGER,
            MathTotal INTEGER,
            EbrwTotal INTEGER,
            Questions TEXT,
            FOREIGN KEY (UserId) REFERENCES Users(Id)
        );
    ";
    cmd.ExecuteNonQuery();
}
﻿using System;
using System.Collections.Generic;
using Microsoft.Data.Sqlite;
using Pinpoint_Quiz.Dtos;
using Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Services
{
    public class AccoladeService
    {
        private readonly SQLiteDatabase _db;

        public AccoladeService(SQLiteDatabase db)
        {
            _db = db;
        }

        /// <summary>
        /// Checks various conditions for awarding accolades and awards them if not already given.
        /// Returns a list of accolade names that were newly awarded.
        /// </summary>
        public List<string> CheckAndAwardAccolades(int userId, bool retakeMode, int totalCorrect, int totalQuestions)
        {
            var newlyAwarded = new List<string>();

            // 1. Count total quizzes taken using QuizResults
            int totalQuizzes = GetQuizCount(userId);
            if (totalQuizzes == 5)
                AwardAccolade(userId, "Quiz Amateur", "You have taken 5 quizzes!", newlyAwarded);
            if (totalQuizzes == 20)
                AwardAccolade(userId, "Quiz Expert", "You have taken 20 quizzes!", newlyAwarded);
            if (totalQuizzes == 100)
                AwardAccolade(userId, "Quiz Master", "You have taken 100 quizzes!", newlyAwarded);

            // 2. Perfect score on one quiz (assume a quiz has 10 questions total)
            if (totalQuestions == 10 && totalCorrect == 10)
            {
                AwardAccolade(userId, "Smart Cookie", "Perfect score on a quiz!", newlyAwarded);

                // Check if user has earned 10 perfect scores
                int perfectTens = CountPerfectTens(userId);
                if (perfectTens == 10)
                    AwardAccolade(userId, "Genius", "Perfect score on 10 quizzes!", newlyAwarded);
            }

            // 3. If retake mode is true and user has retaken 5 quizzes, award "Perfectionist"
            if (retakeMode)
            {
                int retakes = CountRetakes(userId);
                if (retakes == 5)
                    AwardAccolade(userId, "Perfectionist", "Retaken 5 quizzes!", newlyAwarded);
            }

            // 4. Overall proficiency condition
            var user = GetUserById(userId);
            if (user != null)
            {
                // For example, if overall proficiency reaches at least Grade - 4
                double needed = (user.Grade ?? 0) - 4;
                if (needed < 1)
                    needed = 1;
                if (user.OverallProficiency >= needed)
                    AwardAccolade(userId, "Huge Improvement", "Your overall proficiency has greatly improved!", newlyAwarded);
            }

            return newlyAwarded;
        }

        // Retrieves the total number of quizzes for a user
        private int GetQuizCount(int userId)
        {
            using (var conn = _db.GetConnection())
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = "SELECT COUNT(*) FROM QuizResults WHERE UserId=@UserId";
                cmd.Parameters.AddWithValue("@UserId", userId);
                return Convert.ToInt32(cmd.ExecuteScalar());
            }
        }

        // Counts quizzes where a perfect score was achieved (assumes quiz totals sum to 10)
        private int CountPerfectTens(int userId)
        {
            using (var conn = _db.GetConnection())
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT COUNT(*)
                    FROM QuizResults
                    WHERE UserId=@UserId 
                      AND (MathTotal + EbrwTotal)=10 
                      AND (MathCorrect + EbrwCorrect)=10";
                cmd.Parameters.AddWithValue("@UserId", userId);
                return Convert.ToInt32(cmd.ExecuteScalar());
            }
        }

        // Placeholder for counting retakes; you'll need to implement this logic
        private int CountRetakes(int userId)
        {
            // For example, if you track retakes in a separate table or flag, query that.
            return 0;
        }

        // Inserts an accolade if not already awarded, and adds its name to the list.
        private void AwardAccolade(int userId, string name, string description, List<string> newlyAwarded)
        {
            if (!AlreadyHasAccolade(userId, name))
            {
                using (var conn = _db.GetConnection())
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "INSERT INTO Accolades (Name, Description, UserId) VALUES (@Name, @Desc, @UserId)";
                    cmd.Parameters.AddWithValue("@Name", name);
                    cmd.Parameters.AddWithValue("@Desc", description);
                    cmd.Parameters.AddWithValue("@UserId", userId);
                    cmd.ExecuteNonQuery();
                }
                newlyAwarded.Add(name);
            }
        }

        // Checks if an accolade already exists for a user.
        private bool AlreadyHasAccolade(int userId, string name)
        {
            using (var conn = _db.GetConnection())
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = "SELECT COUNT(*) FROM Accolades WHERE UserId=@UserId AND Name=@Name";
                cmd.Parameters.AddWithValue("@UserId", userId);
                cmd.Parameters.AddWithValue("@Name", name);
                int count = Convert.ToInt32(cmd.ExecuteScalar());
                return count > 0;
            }
        }

        // Retrieves a user from the Users table.
        private User GetUserById(int userId)
        {
            using (var conn = _db.GetConnection())
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = "SELECT Id, Email, FirstName, LastName, Grade, ProficiencyMath, ProficiencyEbrw, OverallProficiency FROM Users WHERE Id=@UserId";
                cmd.Parameters.AddWithValue("@UserId", userId);
                using (var reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        return new User
                        {
                            Id = reader.GetInt32(0),
                            Email = reader.GetString(1),
                            FirstName = reader.GetString(2),
                            LastName = reader.GetString(3),
                            Grade = reader.IsDBNull(4) ? 0 : reader.GetInt32(4),
                            ProficiencyMath = reader.GetDouble(5),
                            ProficiencyEbrw = reader.GetDouble(6),
                            OverallProficiency = reader.GetDouble(7)
                        };
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves accolades for a user.
        /// </summary>
        public List<AccoladeDto> GetAccoladesForUser(int userId)
        {
            var accolades = new List<AccoladeDto>();

            using (var conn = _db.GetConnection())
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT Name, Description
                    FROM Accolades
                    WHERE UserId = @UserId
                    ORDER BY DateEarned ASC
                ";
                cmd.Parameters.AddWithValue("@UserId", userId);

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        accolades.Add(new AccoladeDto
                        {
                            Name = reader.IsDBNull(0) ? string.Empty : reader.GetString(0),
                            Description = reader.IsDBNull(1) ? string.Empty : reader.GetString(1)
                        });
                    }
                }
            }

            return accolades;
        }
    }
}
﻿using System;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using BCrypt.Net;
using Pinpoint_Quiz.Dtos;
using Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Services
{
    public class AccountService
    {
        private readonly SQLiteDatabase _db;
        private readonly ILogger<AccountService> _logger;

        public AccountService(SQLiteDatabase db, ILogger<AccountService> logger)
        {
            _db = db;
            _logger = logger;
        }

        public bool RegisterUser(RegisterDto dto)
        {
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    INSERT INTO Users 
                    (Email, PasswordHash, FirstName, LastName, Grade, ClassId, SchoolId,
                     ProficiencyMath, ProficiencyEbrw, OverallProficiency, UserRole)
                    VALUES
                    (@Email, @PasswordHash, @FirstName, @LastName, @Grade, @ClassId, @SchoolId,
                     @Math, @Ebrw, @Overall, @UserRole)
                ";

                cmd.Parameters.AddWithValue("@Email", dto.Email);
                cmd.Parameters.AddWithValue("@PasswordHash", BCrypt.Net.BCrypt.HashPassword(dto.Password));
                cmd.Parameters.AddWithValue("@FirstName", dto.FirstName);
                cmd.Parameters.AddWithValue("@LastName", dto.LastName);
                cmd.Parameters.AddWithValue("@Grade", dto.Grade);
                cmd.Parameters.AddWithValue("@ClassId", dto.ClassId);
                cmd.Parameters.AddWithValue("@SchoolId", dto.SchoolId);

                double baseProf = dto.Grade - 6;
                if (baseProf < 1.0) baseProf = 1.0;

                cmd.Parameters.AddWithValue("@Math", baseProf);
                cmd.Parameters.AddWithValue("@Ebrw", baseProf);
                cmd.Parameters.AddWithValue("@Overall", baseProf);
                cmd.Parameters.AddWithValue("@UserRole", dto.UserRole ?? "Student");

                cmd.ExecuteNonQuery();
                _logger.LogInformation($"User {dto.Email} registered successfully with base proficiency {baseProf}.");
                return true;
            }
            catch (SqliteException ex) when (ex.SqliteErrorCode == 19)
            {
                // Unique constraint on Email
                _logger.LogWarning($"RegisterUser: Email {dto.Email} already in use.");
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError($"RegisterUser error: {ex.Message}");
                return false;
            }
        }

        public int? LoginUser(string email, string password)
        {
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = "SELECT Id, PasswordHash FROM Users WHERE Email = @Email";
                cmd.Parameters.AddWithValue("@Email", email);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    int userId = reader.GetInt32(0);
                    string hashedPass = reader.GetString(1);
                    if (BCrypt.Net.BCrypt.Verify(password, hashedPass))
                    {
                        _logger.LogInformation($"User {email} logged in OK. ID={userId}");
                        return userId;
                    }
                    else
                    {
                        _logger.LogWarning("Password mismatch");
                    }
                }
                else
                {
                    _logger.LogWarning("Email not found");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Login error: {ex.Message}");
            }
            return null;
        }

        public User GetUserById(int userId)
        {
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT Id, Email, PasswordHash, FirstName, LastName,
                           Grade, ClassId, SchoolId, ProficiencyMath, ProficiencyEbrw,
                           OverallProficiency, AvgQuizTime, UserRole
                    FROM Users
                    WHERE Id = @UserId
                ";
                cmd.Parameters.AddWithValue("@UserId", userId);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    return new User
                    {
                        Id = reader.GetInt32(0),
                        Email = reader.GetString(1),
                        PasswordHash = reader.GetString(2),
                        FirstName = reader.GetString(3),
                        LastName = reader.GetString(4),
                        Grade = reader.IsDBNull(5) ? (int?)null : reader.GetInt32(5),
                        ClassId = reader.IsDBNull(6) ? (int?)null : reader.GetInt32(6),
                        SchoolId = reader.IsDBNull(7) ? (int?)null : reader.GetInt32(7),
                        ProficiencyMath = reader.GetDouble(8),
                        ProficiencyEbrw = reader.GetDouble(9),
                        OverallProficiency = reader.GetDouble(10),
                        AvgQuizTime = reader.GetDouble(11),
                        UserRole = reader.GetString(12)
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"GetUserById error: {ex.Message}");
            }
            return null;
        }

        public void GrantFirstLoginAccolade(int userId)
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                INSERT INTO Accolades (Name, Description, UserId)
                SELECT 'First Login!', 'You logged in for the first time!', @UserId
                WHERE NOT EXISTS (
                    SELECT 1 
                    FROM Accolades 
                    WHERE Name = 'First Login!' AND UserId = @UserId
                )
            ";
            cmd.Parameters.AddWithValue("@UserId", userId);
            cmd.ExecuteNonQuery();
        }
    }
}
﻿using Microsoft.Data.Sqlite;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Models.Pinpoint_Quiz.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pinpoint_Quiz.Services
{
    public class ClassPerformanceService
    {
        private readonly SQLiteDatabase _db;

        public ClassPerformanceService(SQLiteDatabase db)
        {
            _db = db;
        }

        /// <summary>
        /// Gets daily average overall proficiency for a given class for the past 'days' days.
        /// </summary>
        private List<AvgData> GetDailyAveragesForClass(int classId, int days)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                SELECT date(QR.QuizDate) as QuizDay, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U on QR.UserId = U.Id
                WHERE U.ClassId = @ClassId
                  AND date(QR.QuizDate) >= date('now', '-' || @Days || ' days')
                GROUP BY QuizDay
                ORDER BY QuizDay ASC
            ";
            cmd.Parameters.AddWithValue("@ClassId", classId);
            cmd.Parameters.AddWithValue("@Days", days);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string day = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { DateLabel = day, AverageProf = avg });
            }
            return list;
        }

        /// <summary>
        /// Gets weekly average overall proficiency for a given class for the past 6 months.
        /// </summary>
        private List<AvgData> GetWeeklyAveragesForClass(int classId, int weeks)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            // Using strftime('%Y-%W', QuizDate) to group by week (year-week)
            cmd.CommandText = @"
                SELECT strftime('%Y-%W', QR.QuizDate) as WeekLabel, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U on QR.UserId = U.Id
                WHERE U.ClassId = @ClassId
                  AND date(QR.QuizDate) >= date('now', '-6 months')
                GROUP BY WeekLabel
                ORDER BY WeekLabel ASC
            ";
            cmd.Parameters.AddWithValue("@ClassId", classId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string week = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { WeekLabel = week, AverageProf = avg });
            }
            return list;
        }

        /// <summary>
        /// Gets daily average overall proficiency for a given school for the past 'days' days.
        /// </summary>
        private List<AvgData> GetDailyAveragesForSchool(int schoolId, int days)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                SELECT date(QR.QuizDate) as QuizDay, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U on QR.UserId = U.Id
                WHERE U.SchoolId = @SchoolId
                  AND date(QR.QuizDate) >= date('now', '-' || @Days || ' days')
                GROUP BY QuizDay
                ORDER BY QuizDay ASC
            ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);
            cmd.Parameters.AddWithValue("@Days", days);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string day = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { DateLabel = day, AverageProf = avg });
            }
            return list;
        }

        /// <summary>
        /// Gets weekly average overall proficiency for a given school for the past 6 months.
        /// </summary>
        private List<AvgData> GetWeeklyAveragesForSchool(int schoolId, int weeks)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                SELECT strftime('%Y-%W', QR.QuizDate) as WeekLabel, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U on QR.UserId = U.Id
                WHERE U.SchoolId = @SchoolId
                  AND date(QR.QuizDate) >= date('now', '-6 months')
                GROUP BY WeekLabel
                ORDER BY WeekLabel ASC
            ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string week = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { WeekLabel = week, AverageProf = avg });
            }
            return list;
        }

        /// <summary>
        /// Retrieves student rows for a given class.
        /// </summary>
        public List<StudentRow> GetStudentRowsForClass(int classId)
        {
            var list = new List<StudentRow>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        SELECT 
            U.Id, 
            U.FirstName || ' ' || U.LastName AS FullName,
            (SELECT COUNT(*) FROM QuizResults WHERE UserId = U.Id) AS QuizCount,
            (SELECT MAX(QuizDate) FROM QuizResults WHERE UserId = U.Id) AS LastQuizDate
        FROM Users U
        WHERE U.ClassId = @ClassId
          AND U.UserRole = 'Student'
        ORDER BY U.LastName, U.FirstName
    ";
            cmd.Parameters.AddWithValue("@ClassId", classId);
            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                var student = new StudentRow
                {
                    StudentId = reader.GetInt32(0),
                    Name = reader.GetString(1),
                    QuizCount = reader.GetInt32(2),
                    LastQuizDate = reader.IsDBNull(3) ? (DateTime?)null : reader.GetDateTime(3)
                };
                list.Add(student);
            }
            return list;
        }


        /// <summary>
        /// Retrieves student rows for a given school.
        /// </summary>
        public List<StudentRow> GetStudentRowsForSchool(int schoolId)
        {
            var list = new List<StudentRow>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        SELECT 
            U.Id, 
            U.FirstName || ' ' || U.LastName AS FullName,
            (SELECT COUNT(*) FROM QuizResults WHERE UserId = U.Id) AS QuizCount,
            (SELECT MAX(QuizDate) FROM QuizResults WHERE UserId = U.Id) AS LastQuizDate
        FROM Users U
        WHERE U.SchoolId = @SchoolId
          AND U.UserRole = 'Student'
        ORDER BY U.LastName, U.FirstName
    ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                var student = new StudentRow
                {
                    StudentId = reader.GetInt32(0),
                    Name = reader.GetString(1),
                    QuizCount = reader.GetInt32(2),
                    LastQuizDate = reader.IsDBNull(3) ? (DateTime?)null : reader.GetDateTime(3)
                };
                list.Add(student);
            }
            return list;
        }


        // Public methods to fill the view model

        public ClassIndexViewModel GetSchoolPerformance(int schoolId)
        {
            var model = new ClassIndexViewModel();

            // Get daily averages (last 30 days)
            var daily = GetDailyAveragesForSchool(schoolId, 30);
            model.DailyDates = daily.Select(x => x.DateLabel).ToList();
            model.DailyAverages = daily.Select(x => x.AverageProf).ToList();

            // Get weekly averages (last 6 months)
            var weekly = GetWeeklyAveragesForSchool(schoolId, 24);
            model.WeeklyLabels = weekly.Select(x => x.WeekLabel).ToList();
            model.WeeklyAverages = weekly.Select(x => x.AverageProf).ToList();

            // Get student rows for the whole school
            model.Students = GetStudentRowsForSchool(schoolId);

            return model;
        }

        public ClassIndexViewModel GetClassPerformance(int classId, bool isAdmin)
        {
            var model = new ClassIndexViewModel();

            // Get daily averages for the class (last 30 days)
            var daily = GetDailyAveragesForClass(classId, 30);
            model.DailyDates = daily.Select(x => x.DateLabel).ToList();
            model.DailyAverages = daily.Select(x => x.AverageProf).ToList();

            // Get weekly averages for the class (last 6 months)
            var weekly = GetWeeklyAveragesForClass(classId, 24);
            model.WeeklyLabels = weekly.Select(x => x.WeekLabel).ToList();
            model.WeeklyAverages = weekly.Select(x => x.AverageProf).ToList();

            // Get student rows for the class
            model.Students = GetStudentRowsForClass(classId);

            return model;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Models.Pinpoint_Quiz.Models;
using Pinpoint_Quiz.Dtos;

namespace Pinpoint_Quiz.Services
{
    public class LessonService
    {
        private readonly SQLiteDatabase _db;
        private readonly ILogger<LessonService> _logger;

        public LessonService(SQLiteDatabase db, ILogger<LessonService> logger)
        {
            _db = db;
            _logger = logger;
        }

        /// <summary>
        /// Retrieves all lessons. If a subject is provided, only lessons matching that subject are returned.
        /// Lessons are ordered by Level ascending.
        /// </summary>
        public List<Lesson> GetAllLessons(string subject = null)
        {
            var lessons = new List<Lesson>();
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();

                if (string.IsNullOrEmpty(subject))
                {
                    cmd.CommandText = @"
                        SELECT Id, Title, Subject, Level, Content, VideoUrl 
                        FROM Lessons 
                        ORDER BY Level ASC";
                }
                else
                {
                    cmd.CommandText = @"
                        SELECT Id, Title, Subject, Level, Content, VideoUrl 
                        FROM Lessons 
                        WHERE Subject = @Subject 
                        ORDER BY Level ASC";
                    cmd.Parameters.AddWithValue("@Subject", subject);
                }

                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var lesson = new Lesson
                    {
                        Id = reader.GetInt32(0),
                        Title = reader.GetString(1),
                        Subject = reader.GetString(2),
                        Level = reader.GetInt32(3),
                        Content = reader.IsDBNull(4) ? string.Empty : reader.GetString(4),
                        VideoUrl = reader.IsDBNull(5) ? string.Empty : reader.GetString(5)
                    };

                    lessons.Add(lesson);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetAllLessons: {ex.Message}");
            }
            return lessons;
        }

        /// <summary>
        /// Retrieves a single lesson by its ID.
        /// </summary>
        public Lesson GetLesson(int id)
        {
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT Id, Title, Subject, Level, Content, VideoUrl 
                    FROM Lessons 
                    WHERE Id = @Id";
                cmd.Parameters.AddWithValue("@Id", id);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    return new Lesson
                    {
                        Id = reader.GetInt32(0),
                        Title = reader.GetString(1),
                        Subject = reader.GetString(2),
                        Level = reader.GetInt32(3),
                        Content = reader.IsDBNull(4) ? string.Empty : reader.GetString(4),
                        VideoUrl = reader.IsDBNull(5) ? string.Empty : reader.GetString(5)
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetLesson: {ex.Message}");
            }
            return null;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Dtos;

namespace Pinpoint_Quiz.Services
{
    public class PerformanceService
    {
        private readonly SQLiteDatabase _database;
        private readonly ILogger<PerformanceService> _logger;

        public PerformanceService(SQLiteDatabase database, ILogger<PerformanceService> logger)
        {
            _database = database;
            _logger = logger;
        }

        public (List<string> Dates, List<double> MathProficiencies, List<double> EbrwProficiencies)
            GetPerformanceHistory(int userId)
        {
            var dates = new List<string>();
            var mathProficiencies = new List<double>();
            var ebrwProficiencies = new List<double>();

            try
            {
                using var conn = _database.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT Week, ProficiencyMath, ProficiencyEbrw
                    FROM Performances
                    WHERE UserId = @UserId
                    ORDER BY Week ASC
                ";
                cmd.Parameters.AddWithValue("@UserId", userId);

                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var weekDate = reader.GetDateTime(0);
                    double math = reader.GetDouble(1);
                    double ebrw = reader.GetDouble(2);

                    dates.Add(weekDate.ToShortDateString());
                    mathProficiencies.Add(math);
                    ebrwProficiencies.Add(ebrw);
                }

                _logger.LogInformation($"Retrieved performance history for user {userId}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetPerformanceHistory for user {userId}: {ex.Message}");
            }

            return (dates, mathProficiencies, ebrwProficiencies);
        }

        public double CalculateProficiencyDelta(List<AnswerDto> answers, string subject)
        {
            double total = 0;
            foreach (var ans in answers)
            {
                if (ans.IsCorrect) total += 1;
            }
            double average = total / Math.Max(1, answers.Count);
            return average - 0.5; // example
        }

        public void UpdateProficiency(int userId, double delta, string subject)
        {
            string columnName = subject switch
            {
                "Math" => "ProficiencyMath",
                "EBRW" => "ProficiencyEbrw",
                _ => "OverallProficiency"
            };

            try
            {
                using var conn = _database.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = $@"
                    UPDATE Users
                    SET {columnName} = {columnName} + @Delta
                    WHERE Id = @UserId
                ";
                cmd.Parameters.AddWithValue("@Delta", delta);
                cmd.Parameters.AddWithValue("@UserId", userId);
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error updating {columnName} for user {userId}: {ex.Message}");
            }
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Dtos;
using Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Services
{
    public class QuizService
    {
        private readonly SQLiteDatabase _db;
        private readonly ILogger<QuizService> _logger;

        public QuizService(SQLiteDatabase db, ILogger<QuizService> logger)
        {
            _db = db;
            _logger = logger;
        }
        public List<QuizHistoryRecord> GetLast10Quizzes(int userId)
        {
            var list = new List<QuizHistoryRecord>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        SELECT
            Id,
            UserId,
            QuizDate,
            MathProficiency,
            EbrwProficiency,
            OverallProficiency,
            MathCorrect,
            EbrwCorrect,
            MathTotal,
            EbrwTotal,
            ActualMathProficiency,
            ActualEbrwProficiency,
            ActualOverallProficiency,
            TimeElapsed
        FROM QuizResults
        WHERE UserId = @UserId
        ORDER BY QuizDate DESC
        LIMIT 10
    ";
            cmd.Parameters.AddWithValue("@UserId", userId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                var record = new QuizHistoryRecord
                {
                    Id = reader.GetInt32(0),
                    UserId = reader.GetInt32(1),
                    QuizDate = reader.GetDateTime(2),
                    MathProficiency = reader.GetDouble(3),
                    EbrwProficiency = reader.GetDouble(4),
                    OverallProficiency = reader.GetDouble(5),
                    MathCorrect = reader.GetInt32(6),
                    EbrwCorrect = reader.GetInt32(7),
                    MathTotal = reader.GetInt32(8),
                    EbrwTotal = reader.GetInt32(9),
                    // read actual columns safely
                    ActualMathProficiency = reader.IsDBNull(10) ? 0 : reader.GetDouble(10),
                    ActualEbrwProficiency = reader.IsDBNull(11) ? 0 : reader.GetDouble(11),
                    ActualOverallProficiency = reader.IsDBNull(12) ? 0 : reader.GetDouble(12),
                    TimeElapsed = reader.IsDBNull(13) ? 0 : reader.GetDouble(13)

                };
                list.Add(record);
            }
            return list;
        }
        public void LogQuestionReport(int userId, int id, string reason)
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        INSERT INTO QuestionReports (UserId, QuestionId, Reason)
        VALUES (@UserId, @QuestionId, @Reason)
    ";
            cmd.Parameters.AddWithValue("@UserId", userId);
            cmd.Parameters.AddWithValue("@QuestionId", id);  // 'id' is the question's ID from the Questions table.
            cmd.Parameters.AddWithValue("@Reason", reason);
            cmd.ExecuteNonQuery();
        }

        // ----------------------------------------------------------------------
        //  QUESTION RETRIEVAL
        // ----------------------------------------------------------------------
        public QuestionDto GetRandomQuestion(string subject)
        {
            QuestionDto dto = null;
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT id, question_prompt, correct_answer, wrong_answer1, wrong_answer2, wrong_answer3,
       explanation, difficulty, subject
FROM Questions
WHERE subject = @Subj
ORDER BY RANDOM()
LIMIT 1

                ";
                cmd.Parameters.AddWithValue("@Subj", subject);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    dto = MapReaderToQuestion(reader);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"GetRandomQuestion error: {ex.Message}");
            }
            return dto;
        }

        public QuestionDto GetQuestionByDifficulty(string subject, int difficulty)
        {
            QuestionDto dto = null;
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT 
    id,                  -- column 0
    question_prompt,     -- column 1
    correct_answer,      -- column 2
    wrong_answer1,       -- column 3
    wrong_answer2,       -- column 4
    wrong_answer3,       -- column 5
    explanation,         -- column 6
    difficulty,          -- column 7
    subject              -- column 8
FROM Questions
WHERE subject = @Subj
  AND difficulty = @Diff
ORDER BY RANDOM()
LIMIT 1

                ";
                cmd.Parameters.AddWithValue("@Subj", subject);
                cmd.Parameters.AddWithValue("@Diff", difficulty);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    dto = MapReaderToQuestion(reader);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"GetQuestionByDifficulty error: {ex.Message}");
            }
            return dto;
        }

        public List<QuestionDto> GenerateAdaptiveQuiz(int userId, string subject, int count)
        {
            // (Placeholder) For real adaptive logic, you'd vary difficulty. 
            // Below is just random.
            var list = new List<QuestionDto>();
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT question_prompt, correct_answer, wrong_answer1, wrong_answer2, wrong_answer3,
                           explanation, difficulty, subject
                    FROM Questions
                    WHERE subject = @Subject
                    ORDER BY RANDOM()
                    LIMIT @Count
                ";
                cmd.Parameters.AddWithValue("@Subject", subject);
                cmd.Parameters.AddWithValue("@Count", count);

                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    list.Add(MapReaderToQuestion(reader));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"GenerateAdaptiveQuiz error: {ex.Message}");
            }
            return list;
        }
        public int SaveQuizResults(
    int studentId,
    double mathProf,
    double ebrwProf,
    double overallProf,
    int mathCorrect,
    int ebrwCorrect,
    int mathTotal,
    int ebrwTotal,
    List<QuestionResultDto> questionResults,
    double actualMath,
    double actualEbrw,
    double actualOverall,
    DateTime timeStarted,
    DateTime timeEnded,
    double timeElapsed) // in seconds
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();

            string questionsJson = JsonSerializer.Serialize(questionResults);

            cmd.CommandText = @"
        INSERT INTO QuizResults 
            (UserId, QuizDate, MathProficiency, EbrwProficiency, OverallProficiency,
             MathCorrect, EbrwCorrect, MathTotal, EbrwTotal, Questions,
             ActualMathProficiency, ActualEbrwProficiency, ActualOverallProficiency,
             TimeStarted, TimeEnded, TimeElapsed)
        VALUES
            (@UserId, datetime('now'), @MathProf, @EbrwProf, @OverallProf, 
             @MathCorrect, @EbrwCorrect, @MathTotal, @EbrwTotal, @Questions,
             @ActualMath, @ActualEbrw, @ActualOverall,
             @TimeStarted, @TimeEnded, @TimeElapsed);
        
        SELECT last_insert_rowid();
    ";

            cmd.Parameters.AddWithValue("@UserId", studentId);
            cmd.Parameters.AddWithValue("@MathProf", mathProf);
            cmd.Parameters.AddWithValue("@EbrwProf", ebrwProf);
            cmd.Parameters.AddWithValue("@OverallProf", overallProf);
            cmd.Parameters.AddWithValue("@MathCorrect", mathCorrect);
            cmd.Parameters.AddWithValue("@EbrwCorrect", ebrwCorrect);
            cmd.Parameters.AddWithValue("@MathTotal", mathTotal);
            cmd.Parameters.AddWithValue("@EbrwTotal", ebrwTotal);
            cmd.Parameters.AddWithValue("@Questions", questionsJson);
            cmd.Parameters.AddWithValue("@ActualMath", actualMath);
            cmd.Parameters.AddWithValue("@ActualEbrw", actualEbrw);
            cmd.Parameters.AddWithValue("@ActualOverall", actualOverall);
            cmd.Parameters.AddWithValue("@TimeStarted", timeStarted);
            cmd.Parameters.AddWithValue("@TimeEnded", timeEnded);
            cmd.Parameters.AddWithValue("@TimeElapsed", timeElapsed);

            int quizId = Convert.ToInt32(cmd.ExecuteScalar());
            _logger.LogInformation($"Saved quiz results with Quiz ID: {quizId}");
            return quizId;
        }



        public List<QuestionDto> GenerateNonAdaptiveQuiz(int userId, string subject, int count)
        {
            // Also random, for demonstration.
            var list = new List<QuestionDto>();
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT question_prompt, correct_answer, wrong_answer1, wrong_answer2, wrong_answer3,
                           explanation, difficulty, subject
                    FROM Questions
                    WHERE subject = @Subject
                    ORDER BY RANDOM()
                    LIMIT @Count
                ";
                cmd.Parameters.AddWithValue("@Subject", subject);
                cmd.Parameters.AddWithValue("@Count", count);

                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    list.Add(MapReaderToQuestion(reader));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"GenerateNonAdaptiveQuiz error: {ex.Message}");
            }
            return list;
        }

        private QuestionDto MapReaderToQuestion(SqliteDataReader reader)
        {
            return new QuestionDto
            {
                Id = reader.GetInt32(0), // Read the 'id' from the first column
                QuestionPrompt = reader.GetString(1),
                CorrectAnswer = reader.GetString(2),
                WrongAnswers = new List<string>
        {
            reader.IsDBNull(3) ? "" : reader.GetString(3),
            reader.IsDBNull(4) ? "" : reader.GetString(4),
            reader.IsDBNull(5) ? "" : reader.GetString(5)
        },
                Explanation = reader.GetString(6),
                Difficulty = reader.GetDouble(7),
                Subject = reader.GetString(8)
            };
        }


        // ----------------------------------------------------------------------
        //  SUBMISSION
        // ----------------------------------------------------------------------
        public bool SubmitQuiz(int studentId, int quizId, QuizSubmissionDto submission)
        {
            // If you want to store final stats or something, do it here.
            _logger.LogInformation($"API SubmitQuiz: student {studentId}, quiz {quizId}.");
            return true;
        }

        // Save each question response in some QuizSubmissions table
        public void SaveQuestionResponse(int userId, int quizId, string questionPrompt, string selectedAnswer, bool isCorrect)
        {
            // For demonstration only; you'd need questionId from the actual question row
            // to store it properly in QuizSubmissions table.
            // Example stub:
            _logger.LogInformation($"Saving question response: User={userId}, Quiz={quizId}, Prompt={questionPrompt}, Answer={selectedAnswer}, Correct={isCorrect}");
        }

        public double GetUserProficiency(int userId, string subject)
        {
            // e.g. read from Users table
            double proficiency = 1.0;
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();

            if (subject == "Math")
                cmd.CommandText = "SELECT ProficiencyMath FROM Users WHERE Id = @UId";
            else
                cmd.CommandText = "SELECT ProficiencyEbrw FROM Users WHERE Id = @UId";

            cmd.Parameters.AddWithValue("@UId", userId);

            var result = cmd.ExecuteScalar();
            if (result != null && double.TryParse(result.ToString(), out double val))
                proficiency = val;

            return proficiency < 1.0 ? 1.0 : proficiency;
        }

        // ----------------------------------------------------------------------
        //  QUIZ HISTORY / RESULTS
        // ----------------------------------------------------------------------
        public int SaveQuizHistory(
            int studentId,
            double mathProf,
            double ebrwProf,
            double overallProf,
            int mathCorrect,
            int ebrwCorrect,
            int mathTotal,
            int ebrwTotal)
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                INSERT INTO QuizHistory 
                (UserId, QuizDate, MathProficiency, EbrwProficiency, OverallProficiency,
                 MathCorrect, EbrwCorrect, MathTotal, EbrwTotal)
                VALUES
                (@UserId, datetime('now'), @MathProf, @EbrwProf, @OverallProf,
                 @MathCorrect, @EbrwCorrect, @MathTotal, @EbrwTotal);

                SELECT last_insert_rowid();
            ";

            cmd.Parameters.AddWithValue("@UserId", studentId);
            cmd.Parameters.AddWithValue("@MathProf", mathProf);
            cmd.Parameters.AddWithValue("@EbrwProf", ebrwProf);
            cmd.Parameters.AddWithValue("@OverallProf", overallProf);
            cmd.Parameters.AddWithValue("@MathCorrect", mathCorrect);
            cmd.Parameters.AddWithValue("@EbrwCorrect", ebrwCorrect);
            cmd.Parameters.AddWithValue("@MathTotal", mathTotal);
            cmd.Parameters.AddWithValue("@EbrwTotal", ebrwTotal);

            int newId = Convert.ToInt32(cmd.ExecuteScalar());
            _logger.LogInformation($"Saved quiz history with ID: {newId}");
            return newId;
        }
        /*
        public List<QuizHistoryRecord> GetQuizHistory(int userId)
        {
            var history = new List<QuizHistoryRecord>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                SELECT Id, UserId, QuizDate, MathProficiency, EbrwProficiency, OverallProficiency,
                       MathCorrect, EbrwCorrect, MathTotal, EbrwTotal, TimeElapsed
                FROM QuizHistory
                WHERE UserId = @U
                ORDER BY QuizDate DESC
                LIMIT 10
            ";
            cmd.Parameters.AddWithValue("@U", userId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                history.Add(new QuizHistoryRecord
                {
                    Id = reader.GetInt32(0),
                    UserId = reader.GetInt32(1),
                    QuizDate = reader.GetDateTime(2),
                    MathProficiency = reader.GetDouble(3),
                    EbrwProficiency = reader.GetDouble(4),
                    OverallProficiency = reader.GetDouble(5),
                    MathCorrect = reader.GetInt32(6),
                    EbrwCorrect = reader.GetInt32(7),
                    MathTotal = reader.GetInt32(8),
                    EbrwTotal = reader.GetInt32(9),
                    TimeElapsed = reader.GetDouble(15)
                });
            }
            return history;
        }*/

        public QuizResults GetQuizResults(int userId, int quizId)
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        SELECT 
            Questions,
            MathCorrect,
            EbrwCorrect,
            MathTotal,
            EbrwTotal,

            MathProficiency,
            EbrwProficiency,
            OverallProficiency,

            ActualMathProficiency,
            ActualEbrwProficiency,
            ActualOverallProficiency,

            QuizDate
        FROM QuizResults
        WHERE UserId = @UserId
          AND Id = @QuizId
    ";
            cmd.Parameters.AddWithValue("@UserId", userId);
            cmd.Parameters.AddWithValue("@QuizId", quizId);

            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                // index 0 => Questions
                string questionsJson = reader.IsDBNull(0) ? "[]" : reader.GetString(0);

                var quizResults = new QuizResults
                {
                    MathCorrect = reader.GetInt32(1),
                    EbrwCorrect = reader.GetInt32(2),
                    MathTotal = reader.GetInt32(3),
                    EbrwTotal = reader.GetInt32(4),

                    FinalProficiencyMath = reader.GetDouble(5),
                    FinalProficiencyEbrw = reader.GetDouble(6),
                    FinalOverallProficiency = reader.GetDouble(7),

                    ActualMathProficiency = reader.GetDouble(8),
                    ActualEbrwProficiency = reader.GetDouble(9),
                    ActualOverallProficiency = reader.GetDouble(10),
                    // If you want a DateTime field in your model:
                    QuizDate = reader.GetDateTime(11)
                };

                quizResults.QuestionResults = JsonSerializer
                    .Deserialize<List<QuestionResultDto>>(questionsJson)
                    ?? new List<QuestionResultDto>();

                return quizResults;
            }


            // If no row found, return null
            return null;
        }


        private double ApplyProficiencyChange(double currentProficiency, double questionDifficulty, bool isCorrect, bool retakeMode)
        {
            const double epsilon = 0.0001; // to check for "equal" difficulty
                                           // If the question's difficulty is approximately equal to the current proficiency
            if (Math.Abs(currentProficiency - questionDifficulty) < epsilon)
            {
                if (retakeMode)
                {
                    return isCorrect ? currentProficiency + 0.015 : currentProficiency - 0.04;
                }
                return isCorrect ? currentProficiency + 0.03 : currentProficiency - 0.08;
            }
            // If the question is below the current proficiency
            else if (questionDifficulty < currentProficiency)
            {
                if (retakeMode)
                {
                    return isCorrect ? currentProficiency + 0.01 : currentProficiency - 0.06;
                }
                return isCorrect ? currentProficiency + 0.02 : currentProficiency - 0.12;
            }
            // If the question is above the current proficiency
            else
            {
                if (retakeMode)
                {
                    return isCorrect ? currentProficiency + 0.025 : currentProficiency - 0.01;
                }
                return isCorrect ? currentProficiency + 0.05 : currentProficiency - 0.02;
            }
        }

        public void UpdateActualProficiency(int userId, List<QuestionResultDto> questionResults, bool retakeMode)
        {
            double mathProf, ebrwProf;
            using (var conn = _db.GetConnection())
            {
                using var cmd = conn.CreateCommand();
                cmd.CommandText = "SELECT ProficiencyMath, ProficiencyEbrw FROM Users WHERE Id = @U";
                cmd.Parameters.AddWithValue("@U", userId);
                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    mathProf = reader.GetDouble(0);
                    ebrwProf = reader.GetDouble(1);
                }
                else
                {
                    return; // user not found
                }
            }

            foreach (var qr in questionResults)
            {
                if (qr.Subject == "Math")
                    mathProf = ApplyProficiencyChange(mathProf, qr.Difficulty, qr.IsCorrect, retakeMode);
                else if (qr.Subject == "EBRW")
                    ebrwProf = ApplyProficiencyChange(ebrwProf, qr.Difficulty, qr.IsCorrect, retakeMode);
            }

            mathProf = Math.Max(1.0, Math.Round(mathProf, 2));
            ebrwProf = Math.Max(1.0, Math.Round(ebrwProf, 2));
            double overall = Math.Round((mathProf + ebrwProf) / 2.0, 2);

            using (var conn = _db.GetConnection())
            {
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
            UPDATE Users
            SET ProficiencyMath = @M,
                ProficiencyEbrw = @E,
                OverallProficiency = @O
            WHERE Id = @U
        ";
                cmd.Parameters.AddWithValue("@M", mathProf);
                cmd.Parameters.AddWithValue("@E", ebrwProf);
                cmd.Parameters.AddWithValue("@O", overall);
                cmd.Parameters.AddWithValue("@U", userId);
                cmd.ExecuteNonQuery();
            }
        }

        public (double math, double ebrw, double overall) GetActualProficiencies(int userId)
        {
            double math = 0, ebrw = 0, overall = 0;
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = "SELECT ProficiencyMath, ProficiencyEbrw, OverallProficiency FROM Users WHERE Id = @U";
            cmd.Parameters.AddWithValue("@U", userId);
            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                math = reader.GetDouble(0);
                ebrw = reader.GetDouble(1);
                overall = reader.GetDouble(2);
            }
            return (math, ebrw, overall);
        }

        public QuizResults GetLatestQuizResult(int userId)
        {
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
        SELECT 
            Questions,                    -- index 0
            MathCorrect,                  -- index 1
            EbrwCorrect,                  -- index 2
            MathTotal,                    -- index 3
            EbrwTotal,                    -- index 4
            MathProficiency,              -- index 5
            EbrwProficiency,              -- index 6
            OverallProficiency,           -- index 7
            ActualMathProficiency,        -- index 8
            ActualEbrwProficiency,        -- index 9
            ActualOverallProficiency,     -- index 10
            QuizDate                      -- index 11
        FROM QuizResults
        WHERE UserId = @UserId
        ORDER BY QuizDate DESC
        LIMIT 1
    ";
            cmd.Parameters.AddWithValue("@UserId", userId);

            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                string questionsJson = reader.IsDBNull(0) ? "[]" : reader.GetString(0);
                var quizResults = new QuizResults
                {
                    MathCorrect = reader.GetInt32(1),
                    EbrwCorrect = reader.GetInt32(2),
                    MathTotal = reader.GetInt32(3),
                    EbrwTotal = reader.GetInt32(4),
                    FinalProficiencyMath = reader.GetDouble(5),
                    FinalProficiencyEbrw = reader.GetDouble(6),
                    FinalOverallProficiency = reader.GetDouble(7),
                    ActualMathProficiency = reader.IsDBNull(8) ? 0 : reader.GetDouble(8),
                    ActualEbrwProficiency = reader.IsDBNull(9) ? 0 : reader.GetDouble(9),
                    ActualOverallProficiency = reader.IsDBNull(10) ? 0 : reader.GetDouble(10),
                    QuizDate = reader.GetDateTime(11) // Ensure your QuizResults model includes QuizDate.
                };

                quizResults.QuestionResults = System.Text.Json.JsonSerializer.Deserialize<List<QuestionResultDto>>(questionsJson)
                                                ?? new List<QuestionResultDto>();
                return quizResults;
            }
            return null;
        }


    }
}
﻿using System.Collections.Generic;
using Microsoft.Data.Sqlite;
using System.Data;

namespace Pinpoint_Quiz.Services
{
    public class SQLiteDatabase
    {
        private readonly string _connectionString;

        public SQLiteDatabase(string databaseFile)
        {
            // You can pass the databaseFile into your connection string if you want dynamic naming,
            // or just hard-code "Qs9.db" if you prefer. For example:
            // _connectionString = $"Data Source={databaseFile};Cache=Shared;Mode=ReadWriteCreate;";
            _connectionString = "Data Source=Qs9.db;Cache=Shared;Mode=ReadWriteCreate;";
        }

        public SqliteConnection GetConnection()
        {
            var connection = new SqliteConnection(_connectionString);
            connection.Open();

            using var cmd = connection.CreateCommand();
            cmd.CommandText = "PRAGMA busy_timeout = 5000;";
            cmd.ExecuteNonQuery();

            return connection;
        }
    }
}
﻿using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pinpoint_Quiz.Services
{
    public class SchoolPerformanceService
    {
        private readonly SQLiteDatabase _db;
        private readonly ILogger<SchoolPerformanceService> _logger;

        public SchoolPerformanceService(SQLiteDatabase db, ILogger<SchoolPerformanceService> logger)
        {
            _db = db;
            _logger = logger;
        }

        // Returns daily average overall proficiency for a given school (last 'days' days)
        public List<AvgData> GetDailyAveragesForSchool(int schoolId, int days)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            cmd.CommandText = @"
                SELECT date(QR.QuizDate) as QuizDay, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U ON QR.UserId = U.Id
                WHERE U.SchoolId = @SchoolId
                  AND date(QR.QuizDate) >= date('now', '-' || @Days || ' days')
                GROUP BY QuizDay
                ORDER BY QuizDay ASC
            ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);
            cmd.Parameters.AddWithValue("@Days", days);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string day = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { DateLabel = day, AverageProf = avg });
            }
            return list;
        }

        // Returns weekly average overall proficiency for a given school (last 6 months)
        public List<AvgData> GetWeeklyAveragesForSchool(int schoolId)
        {
            var list = new List<AvgData>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            // Group by week using SQLite's strftime
            cmd.CommandText = @"
                SELECT strftime('%Y-%W', QR.QuizDate) as WeekLabel, AVG(QR.OverallProficiency) as AvgProf
                FROM QuizResults QR
                JOIN Users U ON QR.UserId = U.Id
                WHERE U.SchoolId = @SchoolId
                  AND date(QR.QuizDate) >= date('now', '-6 months')
                GROUP BY WeekLabel
                ORDER BY WeekLabel ASC
            ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                string week = reader.GetString(0);
                double avg = reader.GetDouble(1);
                list.Add(new AvgData { WeekLabel = week, AverageProf = avg });
            }
            return list;
        }

        // Retrieves teacher rows for the school.
        public List<TeacherRow> GetTeacherRowsForSchool(int schoolId)
        {
            var list = new List<TeacherRow>();
            using var conn = _db.GetConnection();
            using var cmd = conn.CreateCommand();
            // Make sure the SQL syntax is correct (no trailing commas)
            cmd.CommandText = @"
                SELECT 
                    U.Id, 
                    U.FirstName || ' ' || U.LastName AS FullName,
                    (SELECT COUNT(*) FROM QuizResults WHERE UserId = U.Id) AS QuizCount,
                    (SELECT MAX(QuizDate) FROM QuizResults WHERE UserId = U.Id) AS LastQuizDate
                FROM Users U
                WHERE U.SchoolId = @SchoolId
                  AND U.UserRole = 'Teacher'
                ORDER BY U.LastName, U.FirstName
            ";
            cmd.Parameters.AddWithValue("@SchoolId", schoolId);

            using var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                var teacher = new TeacherRow
                {
                    TeacherId = reader.GetInt32(0),
                    Name = reader.GetString(1),
                    QuizCount = reader.GetInt32(2),
                    LastQuizDate = reader.IsDBNull(3) ? (DateTime?)null : reader.GetDateTime(3)
                };
                list.Add(teacher);
            }
            return list;
        }

        // Build a SchoolIndexViewModel for the entire school.
        public SchoolIndexViewModel GetSchoolPerformance(int schoolId)
        {
            var model = new SchoolIndexViewModel();

            // Daily averages (last 30 days)
            var daily = GetDailyAveragesForSchool(schoolId, 30);
            model.DailyDates = daily.Select(x => x.DateLabel).ToList();
            model.DailyAverages = daily.Select(x => x.AverageProf).ToList();

            // Weekly averages (last 6 months)
            var weekly = GetWeeklyAveragesForSchool(schoolId);
            model.WeeklyLabels = weekly.Select(x => x.WeekLabel).ToList();
            model.WeeklyAverages = weekly.Select(x => x.AverageProf).ToList();

            // Teacher list for the school
            model.Teachers = GetTeacherRowsForSchool(schoolId);

            return model;
        }
    }

    // Helper model for averages
    public class AvgData
    {
        public string DateLabel { get; set; }
        public string WeekLabel { get; set; }
        public double AverageProf { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using Microsoft.Data.Sqlite;
using Microsoft.Extensions.Logging;
using Pinpoint_Quiz.Models;

namespace Pinpoint_Quiz.Services
{
    public class UserService
    {
        private readonly SQLiteDatabase _db;
        private readonly ILogger<UserService> _logger;

        public UserService(SQLiteDatabase db, ILogger<UserService> logger)
        {
            _db = db;
            _logger = logger;
        }

        /// <summary>
        /// Retrieves a user by their ID.
        /// </summary>
        public User GetUserById(int userId)
        {
            User user = null;
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT 
                        Id,
                        Email,
                        PasswordHash,
                        FirstName,
                        LastName,
                        Grade,
                        ClassId,
                        SchoolId,
                        ProficiencyMath,
                        ProficiencyEbrw,
                        OverallProficiency,
                        AvgQuizTime,
                        UserRole
                    FROM Users
                    WHERE Id = @Id
                ";
                cmd.Parameters.AddWithValue("@Id", userId);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    user = new User
                    {
                        Id = reader.GetInt32(0),
                        Email = reader.GetString(1),
                        PasswordHash = reader.GetString(2),
                        FirstName = reader.GetString(3),
                        LastName = reader.GetString(4),
                        Grade = reader.IsDBNull(5) ? (int?)null : reader.GetInt32(5),
                        ClassId = reader.IsDBNull(6) ? (int?)null : reader.GetInt32(6),
                        SchoolId = reader.IsDBNull(7) ? (int?)null : reader.GetInt32(7),
                        ProficiencyMath = reader.GetDouble(8),
                        ProficiencyEbrw = reader.GetDouble(9),
                        OverallProficiency = reader.GetDouble(10),
                        AvgQuizTime = reader.GetDouble(11),
                        UserRole = reader.GetString(12)
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error in GetUserById: {0}", ex.Message);
            }
            return user;
        }

        /// <summary>
        /// Retrieves all teachers in a given school.
        /// </summary>
        public List<User> GetTeachersBySchool(int schoolId)
        {
            var teachers = new List<User>();
            try
            {
                using var conn = _db.GetConnection();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"
                    SELECT 
                        Id,
                        Email,
                        PasswordHash,
                        FirstName,
                        LastName,
                        Grade,
                        ClassId,
                        SchoolId,
                        ProficiencyMath,
                        ProficiencyEbrw,
                        OverallProficiency,
                        AvgQuizTime,
                        UserRole
                    FROM Users
                    WHERE SchoolId = @SchoolId AND UserRole = 'Teacher'
                    ORDER BY LastName, FirstName
                ";
                cmd.Parameters.AddWithValue("@SchoolId", schoolId);

                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var teacher = new User
                    {
                        Id = reader.GetInt32(0),
                        Email = reader.GetString(1),
                        PasswordHash = reader.GetString(2),
                        FirstName = reader.GetString(3),
                        LastName = reader.GetString(4),
                        Grade = reader.IsDBNull(5) ? (int?)null : reader.GetInt32(5),
                        ClassId = reader.IsDBNull(6) ? (int?)null : reader.GetInt32(6),
                        SchoolId = reader.IsDBNull(7) ? (int?)null : reader.GetInt32(7),
                        ProficiencyMath = reader.GetDouble(8),
                        ProficiencyEbrw = reader.GetDouble(9),
                        OverallProficiency = reader.GetDouble(10),
                        AvgQuizTime = reader.GetDouble(11),
                        UserRole = reader.GetString(12)
                    };
                    teachers.Add(teacher);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error in GetTeachersBySchool: {0}", ex.Message);
            }
            return teachers;
        }
    }
}
﻿namespace Pinpoint_Quiz.Services
{
    public class ValidationService
    {
        public bool IsEmailValid(string email)
        {
            return !string.IsNullOrEmpty(email) && email.Contains("@");
        }

        public bool IsProficiencyValid(double proficiency)
        {
            return proficiency >= 1 && proficiency <= 10;
        }
    }
}
﻿using System;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Data.Sqlite;

class TestApp
{
    static void Main(string[] args)
    {
        // Test SQLite Connection
        TestSQLiteConnection();

        // Start a Minimal HTTP Server
        Console.WriteLine("Starting basic HTTP server...");
        var builder = WebApplication.CreateBuilder(args);
        var app = builder.Build();

        app.MapGet("/", () => "Hello, world! Your server is running.");

        app.Run("http://localhost:5000");
    }

    static void TestSQLiteConnection()
    {
        var connectionString = "Data Source=Qs9.db;";
        try
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                Console.WriteLine("SQLite connection established successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SQLite connection failed: {ex.Message}");
        }
    }
}

﻿@model Pinpoint_Quiz.Dtos.LoginDto

@{
    ViewData["Title"] = "Sign In";
}

<div class="login-container" style="max-width:400px; margin:auto; padding:20px; border:1px solid #ccc; border-radius:8px;">
    <h2>Sign In</h2>
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
    }

    <form method="post" asp-action="Login">
        <div class="mb-3">
            <label asp-for="Email" class="form-label">Email</label>
            <input asp-for="Email" class="form-control" />
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Password" class="form-label">Password</label>
            <input asp-for="Password" type="password" class="form-control" />
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-gradient" style="padding:10px 20px;">
            Sign In
        </button>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
﻿@model Pinpoint_Quiz.Models.ProfileViewModel

@{
    ViewData["Title"] = "Profile";
}

<div class="hero-container" style="background: #fff;">
    <div class="profile-container content-container">
        <!-- Animated profile name with gradient text -->
        <h2 id="animated-profile-name" class="animated-profile-name">
            @foreach (var letter in (Model.FirstName + " " + Model.LastName + "'s Profile"))
            {
                <span>@letter</span>
            }
        </h2><br />

        <h3 class="section-title">Proficiency Levels</h3><br />
        <div class="proficiency-container">
            <div class="proficiency-box">
                <span class="proficiency-label">Math and Logic</span><br />
                <span class="proficiency-value" id="math-proficiency">0</span>
            </div>
            <div class="proficiency-box">
                <span class="proficiency-label">English</span><br />
                <span class="proficiency-value" id="ebrw-proficiency">0</span>
            </div>
            <div class="proficiency-box">
                <span class="proficiency-label">Overall</span><br />
                <span class="proficiency-value" id="overall-proficiency">0</span>
            </div>
        </div><br />

        <h2>Accolades</h2><br />
        @if (Model.Accolades != null && Model.Accolades.Any())
        {
            <ul class="accolades-container">
                @foreach (var accolade in Model.Accolades)
                {
                    <li class="accolade-card">
                        <strong>@accolade.Name</strong>: @accolade.Description
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No accolades yet.</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        function animateProficiency(elementId, finalValue) {
            let element = document.getElementById(elementId);
            let count = 0;
            let step = 0.08;
            let interval = setInterval(() => {
                if (count >= finalValue) {
                    clearInterval(interval);
                    element.innerText = finalValue.toFixed(2);
                } else {
                    element.innerText = count.toFixed(2);
                    count += step;
                }
            }, 25);
        }

        document.addEventListener("DOMContentLoaded", function () {
            animateProficiency("math-proficiency", @Model.ProficiencyMath);
            animateProficiency("ebrw-proficiency", @Model.ProficiencyEbrw);
            animateProficiency("overall-proficiency", @Model.OverallProficiency);
        });
    </script>
}
﻿@model Pinpoint_Quiz.Dtos.RegisterDto

@{
    ViewData["Title"] = "Register";
}

<h2>Register</h2>

<form method="post" asp-action="Register">
    <div class="mb-3">
        <label asp-for="FirstName" class="form-label"></label>
        <input asp-for="FirstName" class="form-control" />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="LastName" class="form-label"></label>
        <input asp-for="LastName" class="form-control" />
        <span asp-validation-for="LastName" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Email" class="form-label"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Password" class="form-label"></label>
        <input asp-for="Password" type="password" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Grade" class="form-label"></label>
        <input asp-for="Grade" type="number" class="form-control" min="1" max="12" />
        <span asp-validation-for="Grade" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ClassId" class="form-label"></label>
        <input asp-for="ClassId" type="number" class="form-control" />
        <span asp-validation-for="ClassId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="SchoolId" class="form-label"></label>
        <input asp-for="SchoolId" type="number" class="form-control" />
        <span asp-validation-for="SchoolId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="UserRole" class="form-label"></label>
        <select asp-for="UserRole" class="form-select">
            <option value="Student">Student</option>
            <option value="Teacher">Teacher</option>
            <option value="Administrator">Administrator</option>
            <option value="Developer">Developer</option>
        </select>
        <span asp-validation-for="UserRole" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
﻿@model Pinpoint_Quiz.Models.ClassIndexViewModel
@using System.Text.Json;

@{
    ViewData["Title"] = Model.IsAdmin ? "Admin - Class Performance" : "Teacher - Class Performance";
}

<div class="hero-container">
    <div style="max-width:1200px; margin:auto; background:#fff; padding:20px; border-radius:10px;">
        <h2>@(Model.IsAdmin ? "Administrator Dashboard" : "Class Dashboard")</h2>

        @if (Model.IsAdmin)
        {
            <form method="get" class="mb-3">
                <label for="teacherDropdown">Select Teacher:</label>
                <select id="teacherDropdown" name="teacherId" class="form-select" style="width:300px; display:inline-block;">
                    <option value="">--- Whole School ---</option>
                    @foreach (var t in Model.TeacherDropdown)
                    {
                        <option value="@t.TeacherId" selected="@(Model.SelectedTeacherId.HasValue && Model.SelectedTeacherId.Value == t.TeacherId ? "selected" : null)">
                            @t.TeacherName
                        </option>
                    }
                </select>
                <button type="submit" class="btn btn-primary">View</button>
                <button type="submit" name="allSchool" value="true" class="btn btn-secondary">Show Whole School</button>
            </form>
        }

        <h3>Daily Averages (Last 30 Days)</h3>
        <canvas id="daily-chart" width="800" height="300"></canvas>

        <h3>Weekly Averages (Last 6 Months)</h3>
        <canvas id="weekly-chart" width="800" height="300"></canvas>

        <h3>Students</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Quizzes Taken</th>
                    <th>Last Quiz Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in Model.Students)
                {
                    <tr>
                        <td>
                            <a href="/Performances/Progress?userId=@s.StudentId">
                                @s.Name
                            </a>
                        </td>
                        <td>@s.QuizCount</td>
                        <td>
                            @(s.LastQuizDate.HasValue
                                ? s.LastQuizDate.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                                : "No quizzes yet")
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Daily chart
        const dailyCtx = document.getElementById('daily-chart').getContext('2d');
        const dailyChart = new Chart(dailyCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(JsonSerializer.Serialize(Model.DailyDates)),
                datasets: [{
                    label: 'Daily Avg Proficiency',
                    data: @Html.Raw(JsonSerializer.Serialize(Model.DailyAverages)),
                    borderColor: 'blue',
                    fill: false,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                scales: { y: { min: 1, max: 10 } }
            }
        });

        // Weekly chart
        const weeklyCtx = document.getElementById('weekly-chart').getContext('2d');
        const weeklyChart = new Chart(weeklyCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(JsonSerializer.Serialize(Model.WeeklyLabels)),
                datasets: [{
                    label: 'Weekly Avg Proficiency',
                    data: @Html.Raw(JsonSerializer.Serialize(Model.WeeklyAverages)),
                    borderColor: 'green',
                    fill: false,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                scales: { y: { min: 1, max: 10 } }
            }
        });
    </script>
}
﻿@{
    ViewData["Title"] = "Pinpoint - Home";
}

<!-- Hero container with fixed background -->
<div class="hero-container">
    <div class="content-container">
        <div class="text-box fade-in">
            <h1>Welcome to Pinpoint Education</h1>
            <p>
                Adaptive learning designed by educators and for educators.
            </p>
        </div><br />
        <div class="text-box fade-in delay-1">
            <h2>Track Your Progress</h2>
            <p>
                See real‑time data tracking your progress.
            </p>
        </div><br />
        <div class="text-box fade-in delay-2">
            <h2>Individualized Learning</h2>
            <p>
                Quizzes adapt to students' skill level, ensuring efficient progression.
            </p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Simple on-load fade-in; no scroll animations.
        document.addEventListener("DOMContentLoaded", function () {
            // No additional JavaScript required as the .fade-in class is applied in markup.
        });
    </script>
}
﻿@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>
﻿@{
    ViewData["Title"] = "Lessons - Pinpoint Education";
}

<h1>Lessons</h1>
<p>Explore topics across multiple subjects:</p>
<ul>
    <li><a href="/Lessons/Math">Math</a></li>
    <li><a href="/Lessons/Reading">Reading</a></li>
    <li><a href="/Lessons/Logic">Logic</a></li>
</ul>
﻿@model Pinpoint_Quiz.Models.PerformanceChartViewModel
@using System.Text.Json;

@{
    ViewData["Title"] = "Progress";
}

<div class="progress-content" style="width: 70%; max-width: 1000px; margin: auto; background: #fff; padding: 20px; border-radius: 10px;">
    <h2>Your learning journey</h2>
    <br />
    <!-- Actual Proficiency Chart -->
    <canvas id="actual-chart" style="width: 100%; height: 400px; margin-top:50px;"></canvas>
    <br />
    <!-- Estimated Proficiency Chart -->
    <canvas id="estimated-chart" style="width: 100%; height: 400px;"></canvas>
    <br />
    <!-- Time to Complete Chart -->
    <canvas id="time-chart" style="width: 100%; height: 400px; margin-top:50px;"></canvas>
    <br />
    <div style="margin-top:50px;"></div>
    <br />
    <h3>Past Quiz Attempts</h3>
    <div style="margin-top:20px;">
        @foreach (var quiz in Model.QuizHistory.OrderByDescending(q => q.QuizDate))
        {
            <div style="margin-bottom:20px; padding:10px; border:1px solid #ccc; border-radius:8px;">
                <h4>Quiz from @quiz.QuizDate.ToLocalTime().ToString("MMMM dd, yyyy - hh:mm tt")</h4>
                <p><strong>Math and Logic:</strong> @quiz.MathCorrect / @quiz.MathTotal</p>
                <p><strong>English:</strong> @quiz.EbrwCorrect / @quiz.EbrwTotal</p>
                <p>
                    <strong>Estimated Proficiency:</strong> @quiz.OverallProficiency <br />
                    <strong>Actual Proficiency:</strong>
                    (Math and Logic: @quiz.ActualMathProficiency, English: @quiz.ActualEbrwProficiency, Overall: @quiz.ActualOverallProficiency)
                </p>
                <p>
                    <strong>Time Started:</strong> @quiz.TimeStarted.ToLocalTime().ToString("hh:mm tt")<br />
                    <strong>Time Ended:</strong> @quiz.TimeEnded.ToLocalTime().ToString("hh:mm tt")<br />
                    <strong>Time Elapsed:</strong> @quiz.TimeElapsed.ToString("F2") seconds
                </p>
                <a class="btn btn-link" href="/Quizzes/Results?quizId=@quiz.QuizId">View Details</a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Estimated proficiency chart
            const ctxEstimated = document.getElementById('estimated-chart').getContext('2d');
            const estimatedChart = new Chart(ctxEstimated, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Math and Logic Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.MathLevels)),
                            borderColor: 'blue',
                            fill: false
                        },
                        {
                            label: 'English Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.EbrwLevels)),
                            borderColor: 'red',
                            fill: false
                        },
                        {
                            label: 'Overall Estimated',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.OverallLevels)),
                            borderColor: 'grey',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Estimated Proficiency Level' }, min: 1, max: 15, ticks: { stepSize: 1 } }
                    }
                }
            });

            // Actual proficiency chart
            const ctxActual = document.getElementById('actual-chart').getContext('2d');
            const actualChart = new Chart(ctxActual, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Math and Logic Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualMathLevels)),
                            borderColor: 'green',
                            fill: false
                        },
                        {
                            label: 'English Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualEbrwLevels)),
                            borderColor: 'orange',
                            fill: false
                        },
                        {
                            label: 'Overall Actual',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.ActualOverallLevels)),
                            borderColor: 'purple',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Proficiency Level' }, min: 1, max: 10, ticks: { stepSize: 1 } }
                    }
                }
            });

            // Time to Complete chart
            const ctxTime = document.getElementById('time-chart').getContext('2d');
            const timeChart = new Chart(ctxTime, {
                type: 'line',
                data: {
                    labels: @Html.Raw(JsonSerializer.Serialize(Model.LabelDates)),
                    datasets: [
                        {
                            label: 'Time Elapsed (seconds)',
                            data: @Html.Raw(JsonSerializer.Serialize(Model.TimeElapsed)),
                            borderColor: 'brown',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date' } },
                        y: { title: { display: true, text: 'Time (sec)' }, ticks: { beginAtZero: true } }
                    }
                }
            });
        });
    </script>
}
﻿@model Pinpoint_Quiz.Models.AdaptiveQuizViewModel

@{
    ViewData["Title"] = "Adaptive Quiz Round";
}

<h2>Question @Model.QuestionNumber of @Model.TotalQuestions</h2>

@if (Model.MathQuestion == null && Model.EbrwQuestion == null)
{
    <p>No questions available for this round!</p>
}
else
{
    <!-- This form presumably posts the user’s answers to /Quizzes/adaptive-answer
         Make sure your controller has [HttpPost("adaptive-answer")]
         public IActionResult AdaptiveAnswer(...)
         or you’ll get 405 again.
    -->
    <form method="post" action="/Quizzes/adaptive-answer">
        <input type="hidden" name="StudentId" value="@Model.StudentId" />
        <input type="hidden" name="QuestionNumber" value="@Model.QuestionNumber" />

        <!-- MATH -->
        <section>
            <h4>Math Question</h4>
            @if (Model.MathQuestion != null)
            {
                <p>@Model.MathQuestion.QuestionPrompt</p>
                <input type="hidden" name="mathPrompt" value="@Model.MathQuestion.QuestionPrompt" />
                <input type="hidden" name="correctMathAnswer" value="@Model.MathQuestion.CorrectAnswer" />
                <input type="hidden" name="mathExplanation" value="@Model.MathQuestion.Explanation" />

                @foreach (var option in Model.MathQuestion.ShuffledAnswers)
                {
                    var radioId = $"m_{option}";
                    <div class="form-check">
                        <input type="radio" class="form-check-input"
                               name="selectedMathAnswer"
                               id="@radioId"
                               value="@option"
                               required />
                        <label class="form-check-label" for="@radioId">
                            @option
                        </label>
                    </div>
                }
            }
            else
            {
                <p><em>No math question this round.</em></p>
            }
        </section>

        <hr />

        <!-- EBRW -->
        <section>
            <h4>EBRW Question</h4>
            @if (Model.EbrwQuestion != null)
            {
                <p>@Model.EbrwQuestion.QuestionPrompt</p>
                <input type="hidden" name="ebrwPrompt" value="@Model.EbrwQuestion.QuestionPrompt" />
                <input type="hidden" name="correctEbrwAnswer" value="@Model.EbrwQuestion.CorrectAnswer" />
                <input type="hidden" name="ebrwExplanation" value="@Model.EbrwQuestion.Explanation" />

                @foreach (var option in Model.EbrwQuestion.ShuffledAnswers)
                {
                    var radioId = $"e_{option}";
                    <div class="form-check">
                        <input type="radio" class="form-check-input"
                               name="selectedEbrwAnswer"
                               id="@radioId"
                               value="@option"
                               required />
                        <label class="form-check-label" for="@radioId">
                            @option
                        </label>
                    </div>
                }
            }
            else
            {
                <p><em>No EBRW question this round.</em></p>
            }
        </section>

        <button type="submit" class="btn btn-primary mt-3">Submit Answers</button>
    </form>
}
﻿@model Pinpoint_Quiz.Models.QuizzesIndexViewModel

@{
    ViewData["Title"] = "Quizzes";
}

<div class="hero-container">
    <div class="content-container">
        <!-- Use a text-box that is always fully visible -->
        <div class="text-box fade-in" style="opacity:1; transform:none; background: rgba(255,255,255,0.95);">
            <h1>Quiz</h1>
            <p>Start a new quiz here!</p>

            <div style="margin-top: 30px; text-align: center;">
                @if (Model.IsLoggedIn)
                {
                    <a class="btn btn-gradient quiz-btn"
                       href="/Quizzes/start-adaptive">
                        New Quiz<br />
                        <small>Difficulty: @Model.StartingDifficulty.ToString("F2")</small>
                    </a>
                }
                else
                {
                    <a class="btn btn-gradient quiz-btn"
                       href="/Account/Login">
                        Login to Start Quiz
                    </a>
                }
            </div>
        </div>
    </div>
</div>
﻿@{
    ViewData["Title"] = "No Results";
}
<div class="text-box fade-in">
    <h2>No Results Available</h2>
    <p>There are no quiz details to show for this quiz attempt.</p>
    <a class="btn btn-primary" href="/Performances/Progress">Return to Progress</a>
</div>
﻿@model Pinpoint_Quiz.Models.NonAdaptiveQuizViewModel

@{
    ViewData["Title"] = "Non-Adaptive Quiz";
}

<form method="post" action="/Quizzes/submit-nonadaptive">
    <input type="hidden" name="StudentId" value="@Model.StudentId" />
    <input type="hidden" name="Subject" value="@Model.Subject" />

    <h3>Math Questions</h3>
    @if (Model.MathQuestions != null)
    {
        <ol>
            @for (int i = 0; i < Model.MathQuestions.Count; i++)
            {
                var q = Model.MathQuestions[i];
                <li>
                    <p>@q.QuestionPrompt</p>
                    <input type="hidden" name="QuestionMathPrompt[@i]" value="@q.QuestionPrompt" />
                    <input type="hidden" name="QuestionMathCorrect[@i]" value="@q.CorrectAnswer" />
                    <input type="hidden" name="QuestionMathExplanation[@i]" value="@q.Explanation" />

                    @foreach (var option in q.ShuffledAnswers)
                    {
                        var radioId = $"m_{i}_{option}";
                        <div class="form-check">
                            <input type="radio" class="form-check-input"
                                   name="AnswersMath[@i]"
                                   id="@radioId"
                                   value="@option"
                                   required />
                            <label class="form-check-label" for="@radioId">
                                @option
                            </label>
                        </div>
                    }
                </li>
            }
        </ol>
    }

    <h3>EBRW Questions</h3>
    @if (Model.EbrwQuestions != null)
    {
        <ol>
            @for (int j = 0; j < Model.EbrwQuestions.Count; j++)
            {
                var q = Model.EbrwQuestions[j];
                <li>
                    <p>@q.QuestionPrompt</p>
                    <input type="hidden" name="QuestionEbrwPrompt[@j]" value="@q.QuestionPrompt" />
                    <input type="hidden" name="QuestionEbrwCorrect[@j]" value="@q.CorrectAnswer" />
                    <input type="hidden" name="QuestionEbrwExplanation[@j]" value="@q.Explanation" />

                    @foreach (var option in q.ShuffledAnswers)
                    {
                        var radioId = $"e_{j}_{option}";
                        <div class="form-check">
                            <input type="radio" class="form-check-input"
                                   name="AnswersEbrw[@j]"
                                   id="@radioId"
                                   value="@option"
                                   required />
                            <label class="form-check-label" for="@radioId">@option</label>
                        </div>
                    }
                </li>
            }
        </ol>
    }

    <button type="submit" class="btn btn-success">Submit Quiz</button>
</form>
﻿@model Pinpoint_Quiz.Models.QuizResults

@{
    ViewData["Title"] = "Quiz Results";
    int overallScore = Model.MathCorrect + Model.EbrwCorrect;
    int totalQuestions = Model.MathTotal + Model.EbrwTotal;
}

<div style="padding: 15px; border: 1px solid #ccc; border-radius: 8px; margin-bottom:20px;">
    <h2>Quiz Results</h2>
    <p><strong>Math and Logic Correct:</strong> @Model.MathCorrect (out of @Model.MathTotal)</p>
    <p><strong>English Correct:</strong> @Model.EbrwCorrect (out of @Model.EbrwTotal)</p>
    <p><strong>Overall Score:</strong> @overallScore / @totalQuestions</p>
    @* If you want to display a quiz date, use .ToLocalTime() *@
    @* <p><strong>Date:</strong> @Model.QuizDate.ToLocalTime().ToString("MMMM dd, yyyy - hh:mm tt")</p> *@
</div>

@if (Model.QuestionResults != null && Model.QuestionResults.Count > 0)
{
    foreach (var question in Model.QuestionResults)
    {
        <div style="width: 70%; padding: 10px; border: 1px solid #ddd; border-radius: 10px; margin: auto;">
            <h4>@question.QuestionPrompt</h4>
            <p>Your Answer: <span style="color:@(question.IsCorrect ? "green" : "red")">@question.YourAnswer</span></p>
            <p>Correct Answer: <strong>@question.CorrectAnswer</strong></p>
            <p>Explanation: @question.Explanation</p>
        </div>
    }
}
else
{
    <div style="padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
        <p>No question details available.</p>
    </div>
}
﻿@model Pinpoint_Quiz.Models.SingleQuestionViewModel
@{
    ViewData["Title"] = $"Question {Model.QuestionNumber} of {Model.TotalQuestions}";
}

<!-- Include KaTeX CSS so that math is styled correctly -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css"
      crossorigin="anonymous">

<div style="max-width:600px; margin:auto; padding:20px;">
    @if (TempData["ReportMessage"] != null)
    {
        <div class="alert alert-info">
            @TempData["ReportMessage"]
        </div>
    }

    <!-- Report Question Button: This form posts to ReportQuestion -->
    <form method="post" asp-action="ReportQuestion" style="margin-bottom:10px;">
        <input type="hidden" name="questionNumber" value="@Model.QuestionNumber" />
        <input type="hidden" name="id" value="@Model.QuestionId" />
        <button type="submit" class="btn btn-sm btn-outline-danger" style="font-size:0.8em;">
            Report This Question
        </button>
    </form>

    <h2>Question @Model.QuestionNumber of @Model.TotalQuestions</h2>
    <!-- Use Html.Raw to output any math delimiters correctly -->
    <p>@Html.Raw(Model.Prompt)</p>

    <form method="post" asp-action="Answer">
        @for (int i = 0; i < Model.Answers.Count; i++)
        {
            var ans = Model.Answers[i];
            <div class="form-check" style="margin-bottom: 10px;">
                <input type="radio"
                       class="form-check-input brand-radio"
                       name="selectedAnswer"
                       id="ans_@i"
                       value="@ans"
                       required />
                <label class="form-check-label" for="ans_@i">
                    @Html.Raw(ans)
                </label>
            </div>
        }

        <input type="hidden" name="questionNumber" value="@Model.QuestionNumber" />
        <input type="hidden" name="correctAnswer" value="@Model.CorrectAnswer" />
        <input type="hidden" name="subject" value="@Model.Subject" />

        <button class="btn btn-gradient" style="margin-top:15px;" type="submit">
            Submit
        </button>
    </form>
</div>

@section Scripts {
    <!-- Include KaTeX JS libraries -->
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js" crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            renderMathInElement(document.body, {
                delimiters: [
                    { left: "$$", right: "$$", display: true },
                    { left: "\\(", right: "\\)", display: false }
                ]
            });
        });
    </script>
}
﻿@model Pinpoint_Quiz.Models.SchoolIndexViewModel
@using System.Text.Json;

@{
    ViewData["Title"] = "School Performance";
}
@functions {
    public string IsSelected(int teacherId)
    {
        return (Model.SelectedTeacherId.HasValue && Model.SelectedTeacherId.Value == teacherId) ? "selected" : "";
    }
}


<div class="hero-container">
    <div style="max-width:1200px; margin:auto; background:#fff; padding:20px; border-radius:10px;">
        <h2>School Dashboard</h2>
        <p></p>
        <h3>Daily Averages (Last 30 Days)</h3>
        <p></p>
        <canvas id="daily-chart" width="800" height="300"></canvas>
        <p></p>
        <h3>Weekly Averages (Last 6 Months)</h3>
        <canvas id="weekly-chart" width="800" height="300"></canvas>
        <p></p>
        <h3>Teachers</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Quizzes Taken</th>
                    <th>Last Quiz Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in Model.Teachers)
                {
                    <tr>
                        <td>
                            <a href="/Class?teacherId=@t.TeacherId">
                                @t.Name
                            </a>
                        </td>
                        <td>@t.QuizCount</td>
                        <td>
                            @(t.LastQuizDate.HasValue
                                ? t.LastQuizDate.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                                : "No quizzes yet")
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Daily chart
        const dailyCtx = document.getElementById('daily-chart').getContext('2d');
        const dailyChart = new Chart(dailyCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(JsonSerializer.Serialize(Model.DailyDates)),
                datasets: [{
                    label: 'Daily Avg Proficiency',
                    data: @Html.Raw(JsonSerializer.Serialize(Model.DailyAverages)),
                    borderColor: 'blue',
                    fill: false,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                scales: { y: { min: 1, max: 10 } }
            }
        });

        // Weekly chart
        const weeklyCtx = document.getElementById('weekly-chart').getContext('2d');
        const weeklyChart = new Chart(weeklyCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(JsonSerializer.Serialize(Model.WeeklyLabels)),
                datasets: [{
                    label: 'Weekly Avg Proficiency',
                    data: @Html.Raw(JsonSerializer.Serialize(Model.WeeklyAverages)),
                    borderColor: 'green',
                    fill: false,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                scales: { y: { min: 1, max: 10 } }
            }
        });
    </script>
}
﻿@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>
﻿@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    var role = HttpContextAccessor.HttpContext.Session.GetString("UserRole");
    var userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId");
    var userInitials = HttpContextAccessor.HttpContext.Session.GetString("UserInitials");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - Pinpoint</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:400,700" />
</head>
<body>
    <!-- Fixed header with left logo and right nav items -->
    <header class="fixed-header">
        <div class="container-fluid d-flex justify-content-between align-items-center">
            <!-- Left: Logo -->
            <a class="navbar-brand" href="/">
                <img src="~/images/pinpoint-logo.png?v=@DateTime.Now.Ticks" alt="Pinpoint Quiz Logo" style="height:50px;" />
            </a>
            <!-- Right: Navigation -->
            <div class="d-flex align-items-center">
                <ul class="navbar-nav flex-row me-3">
                    @if (role == "Teacher" || role == "Developer" || role == "Student" || role == "Administrator")
                    {
                        <li class="nav-item me-3">
                            <a class="nav-link" href="/Quizzes">Quizzes</a>
                        </li>
                    }
                    
                    @if (role == "Teacher" || role == "Developer" || role == "Student" || role == "Administrator")
                    {
                        <li class="nav-item me-3">
                            <a class="nav-link" href="/Performances/Progress">Progress</a>
                        </li>
                    }
                    @if (role == "Teacher" || role == "Developer")
                    {
                        <li class="nav-item me-3">
                            <a class="nav-link" href="/Class">Class</a>
                        </li>
                    }
                    @if (role == "Administrator" || role == "Developer")
                    {
                        <li class="nav-item me-3">
                            <a class="nav-link" href="/School">School</a>
                        </li>
                    }
                    @if (role == "Developer")
                    {
                        <li class="nav-item me-3">
                            <a class="nav-link" href="/Account/Register">Register New User</a>
                        </li>
                    }
                </ul>
                <ul class="navbar-nav flex-row">
                    @if (userId != null)
                    {
                        <li class="nav-item me-3 d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(userInitials))
                            {
                                <span class="initials-badge me-2">@userInitials</span>
                            }
                            <a class="nav-link" href="/Account/Profile">Profile</a>
                        </li>
                        <li class="nav-item d-flex align-items-center">
                            <form method="post" action="/Account/logout" class="d-inline">
                                <button class="btn btn-link nav-link" type="submit">Logout</button>
                            </form>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/Account/Login">Sign In</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </header>

    <!-- Main content area, offset by header height -->
    <div class="main-content" style="margin-top:80px; min-height: calc(100vh - 80px);">
        @RenderBody()
    </div>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js"></script>
    @RenderSection("Scripts", required: false)
</body>
</html>
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>
﻿@using Pinpoint_Quiz
@using Pinpoint_Quiz.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
﻿@{
    Layout = "_Layout";
}
